[ {
  "connector" : {
    "meta" : {
      "baseScheme" : "twitter-timeline",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-twitter",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.twitter.timeline.TwitterTimelineComponent",
      "name" : "TwitterMention",
      "scheme" : "twitter-mention-connector",
      "javaType" : "io.syndesis.connector.twitter.TwitterMentionComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "twitter-mention-connector",
      "version" : "0.5.8",
      "description" : "Send a notification when a name you specify is mentioned on Twitter.",
      "labels" : [ "twitter" ],
      "pattern" : "From",
      "inputDataType" : "none",
      "outputDataType" : "java:twitter4j.Status",
      "globalOptions" : [ "accessToken", "accessTokenSecret", "consumerKey", "consumerSecret" ],
      "componentOptions" : [ "accessToken", "accessTokenSecret", "consumerKey", "consumerSecret" ],
      "endpointOptions" : [ "delay", "sinceId", "timelineType" ],
      "endpointValues" : {
        "timelineType" : "MENTIONS",
        "delay" : "30000"
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"twitter-timeline\",\n    \"scheme\":\"twitter-mention-connector\",\n    \"syntax\":\"twitter-mention-connector:timelineType\",\n    \"title\":\"TwitterMention\",\n    \"description\":\"Send a notification when a name you specify is mentioned on Twitter.\",\n    \"label\":\"twitter\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.twitter.TwitterMentionComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"twitter-mention-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"accessToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token\"\n    },\n    \"accessTokenSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token secret\"\n    },\n    \"consumerKey\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Key\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer key\"\n    },\n    \"consumerSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer secret\"\n    }\n  },\n  \"properties\":{\n    \"timelineType\":{\n      \"kind\":\"path\",\n      \"displayName\":\"Timeline Type\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"object\",\n      \"javaType\":\"org.apache.camel.component.twitter.data.TimelineType\",\n      \"enum\":[\n        \"RETWEETSOFME\",\n        \"PUBLIC\",\n        \"UNKNOWN\",\n        \"USER\",\n        \"MENTIONS\",\n        \"HOME\"\n      ],\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"MENTIONS\",\n      \"description\":\"The timeline type to produce\\/consume.\"\n    },\n    \"sinceId\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Since Id\",\n      \"group\":\"filter\",\n      \"label\":\"consumer,filter\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":1,\n      \"description\":\"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\"\n    },\n    \"delay\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Delay\",\n      \"group\":\"scheduler\",\n      \"label\":\"consumer,scheduler\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"optionalPrefix\":\"consumer.\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":30000,\n      \"description\":\"Milliseconds before the next poll.\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "twitter-mention-connector" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"twitter-timeline\",\n    \"scheme\":\"twitter-mention-connector\",\n    \"syntax\":\"twitter-mention-connector:timelineType\",\n    \"title\":\"TwitterMention\",\n    \"description\":\"Send a notification when a name you specify is mentioned on Twitter.\",\n    \"label\":\"twitter\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.twitter.TwitterMentionComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"twitter-mention-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"accessToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token\"\n    },\n    \"accessTokenSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token secret\"\n    },\n    \"consumerKey\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Key\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer key\"\n    },\n    \"consumerSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer secret\"\n    }\n  },\n  \"properties\":{\n    \"timelineType\":{\n      \"kind\":\"path\",\n      \"displayName\":\"Timeline Type\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"object\",\n      \"javaType\":\"org.apache.camel.component.twitter.data.TimelineType\",\n      \"enum\":[\n        \"RETWEETSOFME\",\n        \"PUBLIC\",\n        \"UNKNOWN\",\n        \"USER\",\n        \"MENTIONS\",\n        \"HOME\"\n      ],\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"MENTIONS\",\n      \"description\":\"The timeline type to produce\\/consume.\"\n    },\n    \"sinceId\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Since Id\",\n      \"group\":\"filter\",\n      \"label\":\"consumer,filter\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":1,\n      \"description\":\"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\"\n    },\n    \"delay\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Delay\",\n      \"group\":\"scheduler\",\n      \"label\":\"consumer,scheduler\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"optionalPrefix\":\"consumer.\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":30000,\n      \"description\":\"Milliseconds before the next poll.\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-timeline\",\n    \"syntax\": \"twitter-timeline:timelineType\",\n    \"title\": \"Twitter Timeline\",\n    \"description\": \"The Twitter Timeline component consumes twitter timeline or update the status of specific user.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.timeline.TwitterTimelineComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"timelineType\": { \"kind\": \"path\", \"displayName\": \"Timeline Type\", \"group\": \"common\", \"required\": true, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.TimelineType\", \"enum\": [ \"PUBLIC\", \"HOME\", \"USER\", \"MENTIONS\", \"RETWEETSOFME\", \"UNKNOWN\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The timeline type to produce/consume.\" },\n    \"user\": { \"kind\": \"parameter\", \"displayName\": \"User\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The username when using timelineType=user\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:twitter-mention-connector:0.5.8"
}, {
  "component" : {
    "meta" : {
      "twitter" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter\",\n    \"syntax\": \"twitter:kind\",\n    \"title\": \"Twitter\",\n    \"description\": \"Use twitter-directmessage twitter-search twitter-streaming and twitter-timeline instead of this component.\",\n    \"label\": \"api,social\",\n    \"deprecated\": true,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.TwitterComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"kind\": { \"kind\": \"path\", \"displayName\": \"Kind\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"directmessage\", \"search\", \"streaming/filter\", \"streaming/sample\", \"streaming/user\", \"timeline/home\", \"timeline/mentions\", \"timeline/retweetsofme\", \"timeline/user\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The kind of endpoint\" },\n    \"user\": { \"kind\": \"parameter\", \"displayName\": \"User\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used for user timeline consumption direct message production etc.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"keywords\": { \"kind\": \"parameter\", \"displayName\": \"Keywords\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Can be used for search and streaming/filter. Multiple values can be separated with comma.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n",
      "twitter-directmessage" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-directmessage\",\n    \"syntax\": \"twitter-directmessage:user\",\n    \"title\": \"Twitter Direct Message\",\n    \"description\": \"The Twitter Direct Message Component consumes/produces user's direct messages.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.directmessage.TwitterDirectMessageComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"user\": { \"kind\": \"path\", \"displayName\": \"User\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The user name to send a direct message. This will be ignored for consumer.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n",
      "twitter-search" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-search\",\n    \"syntax\": \"twitter-search:keywords\",\n    \"title\": \"Twitter Search\",\n    \"description\": \"The Twitter Search component consumes search results.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.search.TwitterSearchComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"keywords\": { \"kind\": \"path\", \"displayName\": \"Keywords\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The search keywords. Multiple values can be separated with comma.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n",
      "twitter-streaming" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-streaming\",\n    \"syntax\": \"twitter-streaming:streamingType\",\n    \"title\": \"Twitter Streaming\",\n    \"description\": \"The Twitter Streaming component consumes twitter statuses using Streaming API.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": true,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.streaming.TwitterStreamingComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"streamingType\": { \"kind\": \"path\", \"displayName\": \"Streaming Type\", \"group\": \"consumer\", \"required\": true, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.StreamingType\", \"enum\": [ \"SAMPLE\", \"FILTER\", \"USER\", \"UNKNOWN\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The streaming type to consume.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"keywords\": { \"kind\": \"parameter\", \"displayName\": \"Keywords\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Can be used for a streaming filter. Multiple values can be separated with comma.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n",
      "twitter-timeline" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-timeline\",\n    \"syntax\": \"twitter-timeline:timelineType\",\n    \"title\": \"Twitter Timeline\",\n    \"description\": \"The Twitter Timeline component consumes twitter timeline or update the status of specific user.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.timeline.TwitterTimelineComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"timelineType\": { \"kind\": \"path\", \"displayName\": \"Timeline Type\", \"group\": \"common\", \"required\": true, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.TimelineType\", \"enum\": [ \"PUBLIC\", \"HOME\", \"USER\", \"MENTIONS\", \"RETWEETSOFME\", \"UNKNOWN\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The timeline type to produce/consume.\" },\n    \"user\": { \"kind\": \"parameter\", \"displayName\": \"User\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The username when using timelineType=user\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n"
    }
  },
  "gav" : "org.apache.camel:camel-twitter:2.20.0"
}, {
  "component" : {
    "meta" : {
      "bean" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"bean\",\n    \"syntax\": \"bean:beanName\",\n    \"title\": \"Bean\",\n    \"description\": \"The bean component is for invoking Java beans from Camel.\",\n    \"label\": \"core,java\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.bean.BeanComponent\",\n    \"firstVersion\": \"1.0.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"beanName\": { \"kind\": \"path\", \"displayName\": \"Bean Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the name of the bean to invoke\" },\n    \"method\": { \"kind\": \"parameter\", \"displayName\": \"Method\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the name of the method to invoke on the bean\" },\n    \"cache\": { \"kind\": \"parameter\", \"displayName\": \"Cache\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled Camel will cache the result of the first Registry look-up. Cache can be enabled if the bean in the Registry is defined as a singleton scope.\" },\n    \"multiParameterArray\": { \"kind\": \"parameter\", \"displayName\": \"Multi Parameter Array\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": true, \"deprecationNote\": \"This option is used internally by Camel, and is not intended for end users to use.\", \"secret\": false, \"defaultValue\": false, \"description\": \"How to treat the parameters which are passed from the message body; if it is true the message body should be an array of parameters. Note: This option is used internally by Camel and is not intended for end users to use.\" },\n    \"parameters\": { \"kind\": \"parameter\", \"displayName\": \"Parameters\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"bean.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"Used for configuring additional properties on the bean\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "binding" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"binding\",\n    \"syntax\": \"binding:bindingName:delegateUri\",\n    \"title\": \"Binding\",\n    \"description\": \"The binding component is used for as a of wrapping an Endpoint in a contract with a data format.\",\n    \"label\": \"core,transformation\",\n    \"deprecated\": true,\n    \"deprecationNote\": \"Use org.apache.camel.spi.Contract instead\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.binding.BindingNameComponent\",\n    \"firstVersion\": \"2.11.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"bindingName\": { \"kind\": \"path\", \"displayName\": \"Binding Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of the binding to lookup in the Camel registry.\" },\n    \"delegateUri\": { \"kind\": \"path\", \"displayName\": \"Delegate Uri\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Uri of the delegate endpoint.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "browse" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"browse\",\n    \"syntax\": \"browse:name\",\n    \"title\": \"Browse\",\n    \"description\": \"The browse component is used for viewing the messages received on endpoints that supports BrowsableEndpoint.\",\n    \"label\": \"core,monitoring\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.browse.BrowseComponent\",\n    \"firstVersion\": \"1.3.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"A name which can be any string to uniquely identify the endpoint\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "class" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"class\",\n    \"syntax\": \"class:beanName\",\n    \"title\": \"Class\",\n    \"description\": \"The Class Component is for invoking Java Classes (Java beans) from Camel.\",\n    \"label\": \"core,java\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.beanclass.ClassComponent\",\n    \"firstVersion\": \"2.4.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"beanName\": { \"kind\": \"path\", \"displayName\": \"Bean Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the name of the bean to invoke\" },\n    \"method\": { \"kind\": \"parameter\", \"displayName\": \"Method\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the name of the method to invoke on the bean\" },\n    \"cache\": { \"kind\": \"parameter\", \"displayName\": \"Cache\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled Camel will cache the result of the first Registry look-up. Cache can be enabled if the bean in the Registry is defined as a singleton scope.\" },\n    \"multiParameterArray\": { \"kind\": \"parameter\", \"displayName\": \"Multi Parameter Array\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": true, \"deprecationNote\": \"This option is used internally by Camel, and is not intended for end users to use.\", \"secret\": false, \"defaultValue\": false, \"description\": \"How to treat the parameters which are passed from the message body; if it is true the message body should be an array of parameters. Note: This option is used internally by Camel and is not intended for end users to use.\" },\n    \"parameters\": { \"kind\": \"parameter\", \"displayName\": \"Parameters\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"bean.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"Used for configuring additional properties on the bean\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "controlbus" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"controlbus\",\n    \"syntax\": \"controlbus:command:language\",\n    \"title\": \"Control Bus\",\n    \"description\": \"The controlbus component provides easy management of Camel applications based on the Control Bus EIP pattern.\",\n    \"label\": \"core,monitoring\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.controlbus.ControlBusComponent\",\n    \"firstVersion\": \"2.11.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"command\": { \"kind\": \"path\", \"displayName\": \"Command\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"route\", \"language\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Command can be either route or language\" },\n    \"language\": { \"kind\": \"path\", \"displayName\": \"Language\", \"group\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.Language\", \"enum\": [ \"bean\", \"constant\", \"el\", \"exchangeProperty\", \"file\", \"groovy\", \"header\", \"jsonpath\", \"jxpath\", \"mvel\", \"ognl\", \"ref\", \"simple\", \"spel\", \"sql\", \"terser\", \"tokenize\", \"xpath\", \"xquery\", \"xtokenize\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Allows you to specify the name of a Language to use for evaluating the message body. If there is any result from the evaluation then the result is put in the message body.\" },\n    \"action\": { \"kind\": \"parameter\", \"displayName\": \"Action\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"start\", \"stop\", \"suspend\", \"resume\", \"status\" ], \"deprecated\": false, \"secret\": false, \"description\": \"To denote an action that can be either: start stop or status. To either start or stop a route or to get the status of the route as output in the message body. You can use suspend and resume from Camel 2.11.1 onwards to either suspend or resume a route. And from Camel 2.11.1 onwards you can use stats to get performance statics returned in XML format; the routeId option can be used to define which route to get the performance stats for if routeId is not defined then you get statistics for the entire CamelContext.\" },\n    \"async\": { \"kind\": \"parameter\", \"displayName\": \"Async\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to execute the control bus task asynchronously. Important: If this option is enabled then any result from the task is not set on the Exchange. This is only possible if executing tasks synchronously.\" },\n    \"loggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Logging Level\", \"group\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"INFO\", \"description\": \"Logging level used for logging when task is done or if any exceptions occurred during processing the task.\" },\n    \"routeId\": { \"kind\": \"parameter\", \"displayName\": \"Route Id\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To specify a route by its id. The special keyword current indicates the current route.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "dataformat" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"dataformat\",\n    \"syntax\": \"dataformat:name:operation\",\n    \"title\": \"Data Format\",\n    \"description\": \"The dataformat component is used for working with Data Formats as if it was a regular Component supporting Endpoints and URIs.\",\n    \"label\": \"core,transformation\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.dataformat.DataFormatComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of data format\" },\n    \"operation\": { \"kind\": \"path\", \"displayName\": \"Operation\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"marshal\", \"unmarshal\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Operation to use either marshal or unmarshal\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "dataset" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"dataset\",\n    \"syntax\": \"dataset:name\",\n    \"title\": \"Dataset\",\n    \"description\": \"The dataset component provides a mechanism to easily perform load & soak testing of your system.\",\n    \"label\": \"core,testing\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.dataset.DataSetComponent\",\n    \"firstVersion\": \"1.3.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.dataset.DataSet\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of DataSet to lookup in the registry\" },\n    \"dataSetIndex\": { \"kind\": \"parameter\", \"displayName\": \"Data Set Index\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"strict\", \"lenient\", \"off\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"lenient\", \"description\": \"Controls the behaviour of the CamelDataSetIndex header. For Consumers: - off = the header will not be set - strict/lenient = the header will be set For Producers: - off = the header value will not be verified and will not be set if it is not present = strict = the header value must be present and will be verified = lenient = the header value will be verified if it is present and will be set if it is not present\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Time period in millis to wait before starting sending messages.\" },\n    \"minRate\": { \"kind\": \"parameter\", \"displayName\": \"Min Rate\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Wait until the DataSet contains at least this number of messages\" },\n    \"preloadSize\": { \"kind\": \"parameter\", \"displayName\": \"Preload Size\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets how many messages should be preloaded (sent) before the route completes its initialization\" },\n    \"produceDelay\": { \"kind\": \"parameter\", \"displayName\": \"Produce Delay\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 3, \"description\": \"Allows a delay to be specified which causes a delay when a message is sent by the consumer (to simulate slow processing)\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"assertPeriod\": { \"kind\": \"parameter\", \"displayName\": \"Assert Period\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled.\" },\n    \"consumeDelay\": { \"kind\": \"parameter\", \"displayName\": \"Consume Delay\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Allows a delay to be specified which causes a delay when a message is consumed by the producer (to simulate slow processing)\" },\n    \"expectedCount\": { \"kind\": \"parameter\", \"displayName\": \"Expected Count\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n'th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details.\" },\n    \"reportGroup\": { \"kind\": \"parameter\", \"displayName\": \"Report Group\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"A number that is used to turn on throughput logging based on groups of the size.\" },\n    \"resultMinimumWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Minimum Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"resultWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"retainFirst\": { \"kind\": \"parameter\", \"displayName\": \"Retain First\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the first n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"retainLast\": { \"kind\": \"parameter\", \"displayName\": \"Retain Last\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the last n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"sleepForEmptyTest\": { \"kind\": \"parameter\", \"displayName\": \"Sleep For Empty Test\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero\" },\n    \"copyOnExchange\": { \"kind\": \"parameter\", \"displayName\": \"Copy On Exchange\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "direct" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"direct\",\n    \"syntax\": \"direct:name\",\n    \"title\": \"Direct\",\n    \"description\": \"The direct component provides direct synchronous call to another endpoint from the same CamelContext.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.direct.DirectComponent\",\n    \"firstVersion\": \"1.0.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"block\": { \"kind\": \"property\", \"displayName\": \"Block\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active.\" },\n    \"timeout\": { \"kind\": \"property\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"The timeout value to use if block is enabled.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of direct endpoint\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"block\": { \"kind\": \"parameter\", \"displayName\": \"Block\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active.\" },\n    \"failIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Fail If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should fail by throwing an exception when sending to a DIRECT endpoint with no active consumers.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"The timeout value to use if block is enabled.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "direct-vm" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"direct-vm\",\n    \"syntax\": \"direct-vm:name\",\n    \"title\": \"Direct VM\",\n    \"description\": \"The direct-vm component provides direct synchronous call to another endpoint from any CamelContext in the same JVM.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": true,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.directvm.DirectVmComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"block\": { \"kind\": \"property\", \"displayName\": \"Block\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active.\" },\n    \"timeout\": { \"kind\": \"property\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"The timeout value to use if block is enabled.\" },\n    \"headerFilterStrategy\": { \"kind\": \"property\", \"displayName\": \"Header Filter Strategy\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.HeaderFilterStrategy\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets a HeaderFilterStrategy that will only be applied on producer endpoints (on both directions: request and response). Default value: none.\" },\n    \"propagateProperties\": { \"kind\": \"property\", \"displayName\": \"Propagate Properties\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to propagate or not properties from the producer side to the consumer side and vice versa. Default value: true.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of direct-vm endpoint\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"block\": { \"kind\": \"parameter\", \"displayName\": \"Block\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active.\" },\n    \"failIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Fail If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should fail by throwing an exception when sending to a Direct-VM endpoint with no active consumers.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"The timeout value to use if block is enabled.\" },\n    \"headerFilterStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Header Filter Strategy\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.HeaderFilterStrategy\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets a HeaderFilterStrategy that will only be applied on producer endpoints (on both directions: request and response). Default value: none.\" },\n    \"propagateProperties\": { \"kind\": \"parameter\", \"displayName\": \"Propagate Properties\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to propagate or not properties from the producer side to the consumer side and vice versa. Default value: true.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "file" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"file\",\n    \"syntax\": \"file:directoryName\",\n    \"title\": \"File\",\n    \"description\": \"The file component is used for reading or writing files.\",\n    \"label\": \"core,file\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.file.FileComponent\",\n    \"firstVersion\": \"1.0.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"directoryName\": { \"kind\": \"path\", \"displayName\": \"Directory Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.io.File\", \"deprecated\": false, \"secret\": false, \"description\": \"The starting directory\" },\n    \"charset\": { \"kind\": \"parameter\", \"displayName\": \"Charset\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well. Do mind that when writing the file Camel may have to read the message content into memory to be able to convert the data into the configured charset so do not use this if you have big messages.\" },\n    \"doneFileName\": { \"kind\": \"parameter\", \"displayName\": \"Done File Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Producer: If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders.\" },\n    \"fileName\": { \"kind\": \"parameter\", \"displayName\": \"File Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Use Expression such as File Language to dynamically set the filename. For consumers it's used as a filename filter. For producers it's used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today's file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"delete\": { \"kind\": \"parameter\", \"displayName\": \"Delete\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If true the file will be deleted after it is processed successfully.\" },\n    \"moveFailed\": { \"kind\": \"parameter\", \"displayName\": \"Move Failed\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.\" },\n    \"noop\": { \"kind\": \"parameter\", \"displayName\": \"Noop\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again.\" },\n    \"preMove\": { \"kind\": \"parameter\", \"displayName\": \"Pre Move\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order.\" },\n    \"recursive\": { \"kind\": \"parameter\", \"displayName\": \"Recursive\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If a directory will look for files in all the sub-directories as well.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"directoryMustExist\": { \"kind\": \"parameter\", \"displayName\": \"Directory Must Exist\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Similar to startingDirectoryMustExist but this applies during polling recursive sub directories.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"extendedAttributes\": { \"kind\": \"parameter\", \"displayName\": \"Extended Attributes\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To define which file attributes of interest. Like posix:permissionsposix:ownerbasic:lastAccessTime it supports basic wildcard like posix: basic:lastAccessTime\" },\n    \"inProgressRepository\": { \"kind\": \"parameter\", \"displayName\": \"In Progress Repository\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.IdempotentRepository<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.\" },\n    \"localWorkDirectory\": { \"kind\": \"parameter\", \"displayName\": \"Local Work Directory\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory.\" },\n    \"onCompletionExceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"On Completion Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel. In other words the error occurred while the polling was gathering information for instance access to a file network failed so Camel cannot access it to scan for files. The default implementation will log the caused exception at WARN level and ignore it.\" },\n    \"probeContentType\": { \"kind\": \"parameter\", \"displayName\": \"Probe Content Type\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to enable probing of the content type. If enable then the consumer uses link FilesprobeContentType(java.nio.file.Path) to determine the content-type of the file and store that as a header with key link ExchangeFILE_CONTENT_TYPE on the Message.\" },\n    \"processStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Process Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.file.GenericFileProcessStrategy<T>\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply.\" },\n    \"startingDirectoryMustExist\": { \"kind\": \"parameter\", \"displayName\": \"Starting Directory Must Exist\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn't exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist.\" },\n    \"fileExist\": { \"kind\": \"parameter\", \"displayName\": \"File Exist\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.file.GenericFileExist\", \"enum\": [ \"Override\", \"Append\", \"Fail\", \"Ignore\", \"Move\", \"TryRename\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"Override\", \"description\": \"What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers.\" },\n    \"flatten\": { \"kind\": \"parameter\", \"displayName\": \"Flatten\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Flatten is used to flatten the file name path to strip any leading paths so it's just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths.\" },\n    \"moveExisting\": { \"kind\": \"parameter\", \"displayName\": \"Move Existing\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base.\" },\n    \"tempFileName\": { \"kind\": \"parameter\", \"displayName\": \"Temp File Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language.\" },\n    \"tempPrefix\": { \"kind\": \"parameter\", \"displayName\": \"Temp Prefix\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files.\" },\n    \"allowNullBody\": { \"kind\": \"parameter\", \"displayName\": \"Allow Null Body\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override' then the file will be truncated and if set to append the file will remain unchanged.\" },\n    \"chmod\": { \"kind\": \"parameter\", \"displayName\": \"Chmod\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Specify the file permissions which is sent by the producer the chmod value must be between 000 and 777; If there is a leading digit like in 0755 we will ignore it.\" },\n    \"chmodDirectory\": { \"kind\": \"parameter\", \"displayName\": \"Chmod Directory\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Specify the directory permissions used when the producer creates missing directories the chmod value must be between 000 and 777; If there is a leading digit like in 0755 we will ignore it.\" },\n    \"eagerDeleteTargetFile\": { \"kind\": \"parameter\", \"displayName\": \"Eager Delete Target File\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation.\" },\n    \"forceWrites\": { \"kind\": \"parameter\", \"displayName\": \"Force Writes\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to force syncing writes to the file system. You can turn this off if you do not want this level of guarantee for example if writing to logs / audit logs etc; this would yield better performance.\" },\n    \"keepLastModified\": { \"kind\": \"parameter\", \"displayName\": \"Keep Last Modified\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers.\" },\n    \"autoCreate\": { \"kind\": \"parameter\", \"displayName\": \"Auto Create\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Automatically create missing directories in the file's pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to.\" },\n    \"bufferSize\": { \"kind\": \"parameter\", \"displayName\": \"Buffer Size\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 131072, \"description\": \"Write buffer sized in bytes.\" },\n    \"copyAndDeleteOnRenameFail\": { \"kind\": \"parameter\", \"displayName\": \"Copy And Delete On Rename Fail\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to fallback and do a copy and delete file in case the file could not be renamed directly. This option is not available for the FTP component.\" },\n    \"renameUsingCopy\": { \"kind\": \"parameter\", \"displayName\": \"Rename Using Copy\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Perform rename operations using a copy and delete strategy. This is primarily used in environments where the regular rename operation is unreliable (e.g. across different file systems or networks). This option takes precedence over the copyAndDeleteOnRenameFail parameter that will automatically fall back to the copy and delete strategy but only after additional delays.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"antExclude\": { \"kind\": \"parameter\", \"displayName\": \"Ant Exclude\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format.\" },\n    \"antFilterCaseSensitive\": { \"kind\": \"parameter\", \"displayName\": \"Ant Filter Case Sensitive\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets case sensitive flag on ant fiter\" },\n    \"antInclude\": { \"kind\": \"parameter\", \"displayName\": \"Ant Include\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format.\" },\n    \"eagerMaxMessagesPerPoll\": { \"kind\": \"parameter\", \"displayName\": \"Eager Max Messages Per Poll\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting.\" },\n    \"exclude\": { \"kind\": \"parameter\", \"displayName\": \"Exclude\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Is used to exclude files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris\" },\n    \"filter\": { \"kind\": \"parameter\", \"displayName\": \"Filter\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.file.GenericFileFilter<T>\", \"deprecated\": false, \"secret\": false, \"description\": \"Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method.\" },\n    \"filterDirectory\": { \"kind\": \"parameter\", \"displayName\": \"Filter Directory\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Filters the directory based on Simple language. For example to filter on current date you can use a simple date pattern such as $date:now:yyyMMdd\" },\n    \"filterFile\": { \"kind\": \"parameter\", \"displayName\": \"Filter File\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Filters the file based on Simple language. For example to filter on file size you can use $file:size 5000\" },\n    \"idempotent\": { \"kind\": \"parameter\", \"displayName\": \"Idempotent\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again.\" },\n    \"idempotentKey\": { \"kind\": \"parameter\", \"displayName\": \"Idempotent Key\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size\" },\n    \"idempotentRepository\": { \"kind\": \"parameter\", \"displayName\": \"Idempotent Repository\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.IdempotentRepository<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true.\" },\n    \"include\": { \"kind\": \"parameter\", \"displayName\": \"Include\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Is used to include files if filename matches the regex pattern (matching is case in-sensitive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris\" },\n    \"maxDepth\": { \"kind\": \"parameter\", \"displayName\": \"Max Depth\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 2147483647, \"description\": \"The maximum depth to traverse when recursively processing a directory.\" },\n    \"maxMessagesPerPoll\": { \"kind\": \"parameter\", \"displayName\": \"Max Messages Per Poll\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.\" },\n    \"minDepth\": { \"kind\": \"parameter\", \"displayName\": \"Min Depth\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.\" },\n    \"move\": { \"kind\": \"parameter\", \"displayName\": \"Move\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done.\" },\n    \"exclusiveReadLockStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Exclusive Read Lock Strategy\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy<T>\", \"deprecated\": false, \"secret\": false, \"description\": \"Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.\" },\n    \"readLock\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"none\", \"markerFile\", \"fileLock\", \"rename\", \"changed\", \"idempotent\", \"idempotent-changed\", \"idempotent-rename\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering such as Hazelcast Component or Infinispan.\" },\n    \"readLockCheckInterval\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Check Interval\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit.\" },\n    \"readLockDeleteOrphanLockFiles\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Delete Orphan Lock Files\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether or not read lock with marker files should upon startup delete any orphan read lock files which may have been left on the file system if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file this could also be due another node is concurrently reading files from the same shared directory.\" },\n    \"readLockLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Logging Level\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"DEBUG\", \"description\": \"Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock idempotent idempotent-changed idempotent-rename rename.\" },\n    \"readLockMarkerFile\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Marker File\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application.\" },\n    \"readLockMinAge\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Min Age\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"This option applied only for readLock=change. This option allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.\" },\n    \"readLockMinLength\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Min Length\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files.\" },\n    \"readLockRemoveOnCommit\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Remove On Commit\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions.\" },\n    \"readLockRemoveOnRollback\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Remove On Rollback\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false then the file name entry is confirmed (as if the file did a commit).\" },\n    \"readLockTimeout\": { \"kind\": \"parameter\", \"displayName\": \"Read Lock Timeout\", \"group\": \"lock\", \"label\": \"consumer,lock\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 10000, \"description\": \"Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 500, \"description\": \"Milliseconds before the next poll. The default value is 500. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool. This option allows you to share a thread pool among multiple consumers.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"Allow to plugin a custom org.apache.camel.spi.ScheduledPollConsumerScheduler to use as the scheduler for firing when the polling consumer runs. The default implementation uses the ScheduledExecutorService and there is a Quartz2 and Spring based which supports CRON expressions. Notice: If using a custom scheduler then the options for initialDelay useFixedDelay timeUnit and scheduledExecutorService may not be in use. Use the text quartz2 to refer to use the Quartz2 scheduler; and use the text spring to use the Spring based; and use the text myScheduler to refer to a custom scheduler by its id in the Registry. See Quartz2 page for an example.\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"shuffle\": { \"kind\": \"parameter\", \"displayName\": \"Shuffle\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"To shuffle the list of files (sort in random order)\" },\n    \"sortBy\": { \"kind\": \"parameter\", \"displayName\": \"Sort By\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date.\" },\n    \"sorter\": { \"kind\": \"parameter\", \"displayName\": \"Sorter\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"object\", \"javaType\": \"java.util.Comparator<org.apache.camel.component.file.GenericFile<T>>\", \"deprecated\": false, \"secret\": false, \"description\": \"Pluggable sorter as a java.util.Comparator class.\" }\n  }\n}\n\n",
      "language" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"language\",\n    \"syntax\": \"language:languageName:resourceUri\",\n    \"title\": \"Language\",\n    \"description\": \"The language component allows you to send a message to an endpoint which executes a script by any of the supported Languages in Camel.\",\n    \"label\": \"core,script\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.language.LanguageComponent\",\n    \"firstVersion\": \"2.5.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"languageName\": { \"kind\": \"path\", \"displayName\": \"Language Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"bean\", \"constant\", \"el\", \"exchangeProperty\", \"file\", \"groovy\", \"header\", \"javascript\", \"jsonpath\", \"jxpath\", \"mvel\", \"ognl\", \"php\", \"python\", \"ref\", \"ruby\", \"simple\", \"spel\", \"sql\", \"terser\", \"tokenize\", \"xpath\", \"xquery\", \"xtokenize\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the name of the language to use\" },\n    \"resourceUri\": { \"kind\": \"path\", \"displayName\": \"Resource Uri\", \"group\": \"producer\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Path to the resource or a reference to lookup a bean in the Registry to use as the resource\" },\n    \"binary\": { \"kind\": \"parameter\", \"displayName\": \"Binary\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the script is binary content or text content. By default the script is read as text content (eg java.lang.String)\" },\n    \"cacheScript\": { \"kind\": \"parameter\", \"displayName\": \"Cache Script\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to cache the compiled script and reuse Notice reusing the script can cause side effects from processing one Camel org.apache.camel.Exchange to the next org.apache.camel.Exchange.\" },\n    \"contentCache\": { \"kind\": \"parameter\", \"displayName\": \"Content Cache\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether to use resource content cache or not.\" },\n    \"script\": { \"kind\": \"parameter\", \"displayName\": \"Script\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the script to execute\" },\n    \"transform\": { \"kind\": \"parameter\", \"displayName\": \"Transform\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether or not the result of the script should be used as message body. This options is default true.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "log" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"log\",\n    \"syntax\": \"log:loggerName\",\n    \"title\": \"Log\",\n    \"description\": \"The log component logs message exchanges to the underlying logging mechanism.\",\n    \"label\": \"core,monitoring\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.log.LogComponent\",\n    \"firstVersion\": \"1.1.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"exchangeFormatter\": { \"kind\": \"property\", \"displayName\": \"Exchange Formatter\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExchangeFormatter\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets a custom ExchangeFormatter to convert the Exchange to a String suitable for logging. If not specified we default to DefaultExchangeFormatter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"loggerName\": { \"kind\": \"path\", \"displayName\": \"Logger Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The logger name to use\" },\n    \"groupActiveOnly\": { \"kind\": \"parameter\", \"displayName\": \"Group Active Only\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If true will hide stats when no new messages have been received for a time interval if false show stats regardless of message traffic.\" },\n    \"groupDelay\": { \"kind\": \"parameter\", \"displayName\": \"Group Delay\", \"group\": \"producer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Set the initial delay for stats (in millis)\" },\n    \"groupInterval\": { \"kind\": \"parameter\", \"displayName\": \"Group Interval\", \"group\": \"producer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"If specified will group message stats by this time interval (in millis)\" },\n    \"groupSize\": { \"kind\": \"parameter\", \"displayName\": \"Group Size\", \"group\": \"producer\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"An integer that specifies a group size for throughput logging.\" },\n    \"level\": { \"kind\": \"parameter\", \"displayName\": \"Level\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\", \"OFF\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"INFO\", \"description\": \"Logging level to use. The default value is INFO.\" },\n    \"logMask\": { \"kind\": \"parameter\", \"displayName\": \"Log Mask\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"If true mask sensitive information like password or passphrase in the log.\" },\n    \"marker\": { \"kind\": \"parameter\", \"displayName\": \"Marker\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"An optional Marker name to use.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"maxChars\": { \"kind\": \"parameter\", \"displayName\": \"Max Chars\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 10000, \"description\": \"Limits the number of characters logged per line.\" },\n    \"multiline\": { \"kind\": \"parameter\", \"displayName\": \"Multiline\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled then each information is outputted on a newline.\" },\n    \"showAll\": { \"kind\": \"parameter\", \"displayName\": \"Show All\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Quick option for turning all options on. (multiline maxChars has to be manually set if to be used)\" },\n    \"showBody\": { \"kind\": \"parameter\", \"displayName\": \"Show Body\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Show the message body.\" },\n    \"showBodyType\": { \"kind\": \"parameter\", \"displayName\": \"Show Body Type\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Show the body Java type.\" },\n    \"showCaughtException\": { \"kind\": \"parameter\", \"displayName\": \"Show Caught Exception\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"f the exchange has a caught exception show the exception message (no stack trace). A caught exception is stored as a property on the exchange (using the key link org.apache.camel.ExchangeEXCEPTION_CAUGHT and for instance a doCatch can catch exceptions.\" },\n    \"showException\": { \"kind\": \"parameter\", \"displayName\": \"Show Exception\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the exchange has an exception show the exception message (no stacktrace)\" },\n    \"showExchangeId\": { \"kind\": \"parameter\", \"displayName\": \"Show Exchange Id\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Show the unique exchange ID.\" },\n    \"showExchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Show Exchange Pattern\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Shows the Message Exchange Pattern (or MEP for short).\" },\n    \"showFiles\": { \"kind\": \"parameter\", \"displayName\": \"Show Files\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled Camel will output files\" },\n    \"showFuture\": { \"kind\": \"parameter\", \"displayName\": \"Show Future\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled Camel will on Future objects wait for it to complete to obtain the payload to be logged.\" },\n    \"showHeaders\": { \"kind\": \"parameter\", \"displayName\": \"Show Headers\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Show the message headers.\" },\n    \"showOut\": { \"kind\": \"parameter\", \"displayName\": \"Show Out\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the exchange has an out message show the out message.\" },\n    \"showProperties\": { \"kind\": \"parameter\", \"displayName\": \"Show Properties\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Show the exchange properties.\" },\n    \"showStackTrace\": { \"kind\": \"parameter\", \"displayName\": \"Show Stack Trace\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Show the stack trace if an exchange has an exception. Only effective if one of showAll showException or showCaughtException are enabled.\" },\n    \"showStreams\": { \"kind\": \"parameter\", \"displayName\": \"Show Streams\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether Camel should show stream bodies or not (eg such as java.io.InputStream). Beware if you enable this option then you may not be able later to access the message body as the stream have already been read by this logger. To remedy this you will have to use Stream Caching.\" },\n    \"skipBodyLineSeparator\": { \"kind\": \"parameter\", \"displayName\": \"Skip Body Line Separator\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to skip line separators when logging the message body. This allows to log the message body in one line setting this option to false will preserve any line separators from the body which then will log the body as is.\" },\n    \"style\": { \"kind\": \"parameter\", \"displayName\": \"Style\", \"group\": \"formatting\", \"label\": \"formatting\", \"type\": \"object\", \"javaType\": \"org.apache.camel.processor.DefaultExchangeFormatter.OutputStyle\", \"enum\": [ \"Default\", \"Tab\", \"Fixed\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"Default\", \"description\": \"Sets the outputs style to use.\" }\n  }\n}\n\n",
      "mock" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"mock\",\n    \"syntax\": \"mock:name\",\n    \"title\": \"Mock\",\n    \"description\": \"The mock component is used for testing routes and mediation rules using mocks.\",\n    \"label\": \"core,testing\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.mock.MockComponent\",\n    \"firstVersion\": \"1.0.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of mock endpoint\" },\n    \"assertPeriod\": { \"kind\": \"parameter\", \"displayName\": \"Assert Period\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled.\" },\n    \"expectedCount\": { \"kind\": \"parameter\", \"displayName\": \"Expected Count\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n'th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details.\" },\n    \"reportGroup\": { \"kind\": \"parameter\", \"displayName\": \"Report Group\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"A number that is used to turn on throughput logging based on groups of the size.\" },\n    \"resultMinimumWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Minimum Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"resultWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"retainFirst\": { \"kind\": \"parameter\", \"displayName\": \"Retain First\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the first n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"retainLast\": { \"kind\": \"parameter\", \"displayName\": \"Retain Last\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the last n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"sleepForEmptyTest\": { \"kind\": \"parameter\", \"displayName\": \"Sleep For Empty Test\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero\" },\n    \"copyOnExchange\": { \"kind\": \"parameter\", \"displayName\": \"Copy On Exchange\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "properties" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"properties\",\n    \"syntax\": \"properties:key\",\n    \"title\": \"Properties\",\n    \"description\": \"The properties component is used for using property placeholders in endpoint uris.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.properties.PropertiesComponent\",\n    \"firstVersion\": \"2.3.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"locations\": { \"kind\": \"property\", \"displayName\": \"Locations\", \"group\": \"common\", \"type\": \"array\", \"javaType\": \"java.util.List<org.apache.camel.component.properties.PropertiesLocation>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of locations to load properties. This option will override any default locations and only use the locations from this option.\" },\n    \"location\": { \"kind\": \"property\", \"displayName\": \"Location\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option.\" },\n    \"encoding\": { \"kind\": \"property\", \"displayName\": \"Encoding\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Encoding to use when loading properties file from the file system or classpath. If no encoding has been set then the properties files is loaded using ISO-8859-1 encoding (latin-1) as documented by link java.util.Propertiesload(java.io.InputStream)\" },\n    \"propertiesResolver\": { \"kind\": \"property\", \"displayName\": \"Properties Resolver\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.properties.PropertiesResolver\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom PropertiesResolver\" },\n    \"propertiesParser\": { \"kind\": \"property\", \"displayName\": \"Properties Parser\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.properties.PropertiesParser\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom PropertiesParser\" },\n    \"cache\": { \"kind\": \"property\", \"displayName\": \"Cache\", \"group\": \"common\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether or not to cache loaded properties. The default value is true.\" },\n    \"propertyPrefix\": { \"kind\": \"property\", \"displayName\": \"Property Prefix\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Optional prefix prepended to property names before resolution.\" },\n    \"propertySuffix\": { \"kind\": \"property\", \"displayName\": \"Property Suffix\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Optional suffix appended to property names before resolution.\" },\n    \"fallbackToUnaugmentedProperty\": { \"kind\": \"property\", \"displayName\": \"Fallback To Unaugmented Property\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If true first attempt resolution of property name augmented with propertyPrefix and propertySuffix before falling back the plain property name specified. If false only the augmented property name is searched.\" },\n    \"defaultFallbackEnabled\": { \"kind\": \"property\", \"displayName\": \"Default Fallback Enabled\", \"group\": \"common\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If false the component does not attempt to find a default for the key by looking after the colon separator.\" },\n    \"ignoreMissingLocation\": { \"kind\": \"property\", \"displayName\": \"Ignore Missing Location\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to silently ignore if a location cannot be located such as a properties file not found.\" },\n    \"prefixToken\": { \"kind\": \"property\", \"displayName\": \"Prefix Token\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"{{\", \"description\": \"Sets the value of the prefix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_PREFIX_TOKEN).\" },\n    \"suffixToken\": { \"kind\": \"property\", \"displayName\": \"Suffix Token\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"}}\", \"description\": \"Sets the value of the suffix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_SUFFIX_TOKEN).\" },\n    \"initialProperties\": { \"kind\": \"property\", \"displayName\": \"Initial Properties\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Properties\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets initial properties which will be used before any locations are resolved.\" },\n    \"overrideProperties\": { \"kind\": \"property\", \"displayName\": \"Override Properties\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Properties\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets a special list of override properties that take precedence and will use first if a property exist.\" },\n    \"systemPropertiesMode\": { \"kind\": \"property\", \"displayName\": \"System Properties Mode\", \"group\": \"common\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"enum\": [ \"0\", \"1\", \"2\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"2\", \"description\": \"Sets the system property mode.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"key\": { \"kind\": \"path\", \"displayName\": \"Key\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Property key to use as placeholder\" },\n    \"ignoreMissingLocation\": { \"kind\": \"parameter\", \"displayName\": \"Ignore Missing Location\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to silently ignore if a location cannot be located such as a properties file not found.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "ref" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"ref\",\n    \"syntax\": \"ref:name\",\n    \"title\": \"Ref\",\n    \"description\": \"The ref component is used for lookup of existing endpoints bound in the Registry.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.ref.RefComponent\",\n    \"firstVersion\": \"1.2.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of endpoint to lookup in the registry.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "rest" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"rest\",\n    \"syntax\": \"rest:method:path:uriTemplate\",\n    \"title\": \"REST\",\n    \"description\": \"The rest component is used for either hosting REST services (consumer) or calling external REST services (producer).\",\n    \"label\": \"core,rest\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.rest.RestComponent\",\n    \"firstVersion\": \"2.14.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"componentName\": { \"kind\": \"property\", \"displayName\": \"Component Name\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory (consumer) or org.apache.camel.spi.RestProducerFactory (producer) is registered in the registry. If either one is found then that is being used.\" },\n    \"apiDoc\": { \"kind\": \"property\", \"displayName\": \"Api Doc\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The swagger api doc resource to use. The resource is loaded from classpath by default and must be in JSon format.\" },\n    \"host\": { \"kind\": \"property\", \"displayName\": \"Host\", \"group\": \"producer\", \"label\": \"producer\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Host and port of HTTP service to use (override host in swagger schema)\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"method\": { \"kind\": \"path\", \"displayName\": \"Method\", \"group\": \"common\", \"label\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"get\", \"post\", \"put\", \"delete\", \"patch\", \"head\", \"trace\", \"connect\", \"options\" ], \"deprecated\": false, \"secret\": false, \"description\": \"HTTP method to use.\" },\n    \"path\": { \"kind\": \"path\", \"displayName\": \"Path\", \"group\": \"common\", \"label\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The base path\" },\n    \"uriTemplate\": { \"kind\": \"path\", \"displayName\": \"Uri Template\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The uri template\" },\n    \"componentName\": { \"kind\": \"parameter\", \"displayName\": \"Component Name\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found then that is being used.\" },\n    \"consumes\": { \"kind\": \"parameter\", \"displayName\": \"Consumes\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Media type such as: 'text/xml' or 'application/json' this REST service accepts. By default we accept all kinds of types.\" },\n    \"inType\": { \"kind\": \"parameter\", \"displayName\": \"In Type\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To declare the incoming POJO binding type as a FQN class name\" },\n    \"outType\": { \"kind\": \"parameter\", \"displayName\": \"Out Type\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To declare the outgoing POJO binding type as a FQN class name\" },\n    \"produces\": { \"kind\": \"parameter\", \"displayName\": \"Produces\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Media type such as: 'text/xml' or 'application/json' this REST service returns.\" },\n    \"routeId\": { \"kind\": \"parameter\", \"displayName\": \"Route Id\", \"group\": \"common\", \"label\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of the route this REST services creates\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"description\": { \"kind\": \"parameter\", \"displayName\": \"Description\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Human description to document this REST service\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"apiDoc\": { \"kind\": \"parameter\", \"displayName\": \"Api Doc\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The swagger api doc resource to use. The resource is loaded from classpath by default and must be in JSon format.\" },\n    \"bindingMode\": { \"kind\": \"parameter\", \"displayName\": \"Binding Mode\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.model.rest.RestBindingMode\", \"enum\": [ \"auto\", \"off\", \"json\", \"xml\", \"json_xml\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Configures the binding mode for the producer. If set to anything other than 'off' the producer will try to convert the body of the incoming message from inType to the json or xml and the response from json or xml to outType.\" },\n    \"host\": { \"kind\": \"parameter\", \"displayName\": \"Host\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Host and port of HTTP service to use (override host in swagger schema)\" },\n    \"queryParameters\": { \"kind\": \"parameter\", \"displayName\": \"Query Parameters\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"Query parameters for the HTTP service to call\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "rest-api" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"rest-api\",\n    \"syntax\": \"rest-api:path/contextIdPattern\",\n    \"title\": \"REST API\",\n    \"description\": \"The rest-api component is used for providing Swagger API of the REST services which has been defined using the rest-dsl in Camel.\",\n    \"label\": \"core,rest\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": true,\n    \"producerOnly\": false,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.rest.RestApiComponent\",\n    \"firstVersion\": \"2.16.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"path\": { \"kind\": \"path\", \"displayName\": \"Path\", \"group\": \"consumer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The base path\" },\n    \"contextIdPattern\": { \"kind\": \"path\", \"displayName\": \"Context Id Pattern\", \"group\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.\" },\n    \"apiComponentName\": { \"kind\": \"parameter\", \"displayName\": \"Api Component Name\", \"group\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The Camel Rest API component to use for generating the API of the REST services such as swagger.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"componentName\": { \"kind\": \"parameter\", \"displayName\": \"Component Name\", \"group\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found then that is being used.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "scheduler" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"scheduler\",\n    \"syntax\": \"scheduler:name\",\n    \"title\": \"Scheduler\",\n    \"description\": \"The scheduler component is used for generating message exchanges when a scheduler fires.\",\n    \"label\": \"core,scheduling\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": true,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.scheduler.SchedulerComponent\",\n    \"firstVersion\": \"2.15.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"concurrentTasks\": { \"kind\": \"property\", \"displayName\": \"Concurrent Tasks\", \"group\": \"scheduler\", \"label\": \"scheduler\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Number of threads used by the scheduling thread pool. Is by default using a single thread\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"consumer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the scheduler\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel. In other words the error occurred while the polling was gathering information for instance access to a file network failed so Camel cannot access it to scan for files. The default implementation will log the caused exception at WARN level and ignore it.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"concurrentTasks\": { \"kind\": \"parameter\", \"displayName\": \"Concurrent Tasks\", \"group\": \"scheduler\", \"label\": \"scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Number of threads used by the scheduling thread pool. Is by default using a single thread\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 500, \"description\": \"Milliseconds before the next poll. The default value is 500. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool. This option allows you to share a thread pool among multiple consumers.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"Allow to plugin a custom org.apache.camel.spi.ScheduledPollConsumerScheduler to use as the scheduler for firing when the polling consumer runs. The default implementation uses the ScheduledExecutorService and there is a Quartz2 and Spring based which supports CRON expressions. Notice: If using a custom scheduler then the options for initialDelay useFixedDelay timeUnit and scheduledExecutorService may not be in use. Use the text quartz2 to refer to use the Quartz2 scheduler; and use the text spring to use the Spring based; and use the text myScheduler to refer to a custom scheduler by its id in the Registry. See Quartz2 page for an example.\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" }\n  }\n}\n\n",
      "seda" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"seda\",\n    \"syntax\": \"seda:name\",\n    \"title\": \"SEDA\",\n    \"description\": \"The seda component provides asynchronous call to another endpoint from any CamelContext in the same JVM.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": true,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.seda.SedaComponent\",\n    \"firstVersion\": \"1.1.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"queueSize\": { \"kind\": \"property\", \"displayName\": \"Queue Size\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"concurrentConsumers\": { \"kind\": \"property\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Sets the default number of concurrent threads processing exchanges.\" },\n    \"defaultQueueFactory\": { \"kind\": \"property\", \"displayName\": \"Default Queue Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.seda.BlockingQueueFactory<org.apache.camel.Exchange>\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default queue factory.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of queue\" },\n    \"size\": { \"kind\": \"parameter\", \"displayName\": \"Size\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 2147483647, \"description\": \"The maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"concurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Number of concurrent threads processing exchanges.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"limitConcurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Limit Concurrent Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off.\" },\n    \"multipleConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Multiple Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint.\" },\n    \"pollTimeout\": { \"kind\": \"parameter\", \"displayName\": \"Poll Timeout\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.\" },\n    \"purgeWhenStopping\": { \"kind\": \"parameter\", \"displayName\": \"Purge When Stopping\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded.\" },\n    \"blockWhenFull\": { \"kind\": \"parameter\", \"displayName\": \"Block When Full\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted.\" },\n    \"discardIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Discard If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"failIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Fail If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.\" },\n    \"waitForTaskToComplete\": { \"kind\": \"parameter\", \"displayName\": \"Wait For Task To Complete\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.WaitForTaskToComplete\", \"enum\": [ \"Never\", \"IfReplyExpected\", \"Always\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"IfReplyExpected\", \"description\": \"Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected.\" },\n    \"queue\": { \"kind\": \"parameter\", \"displayName\": \"Queue\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.BlockingQueue\", \"deprecated\": false, \"secret\": false, \"description\": \"Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "stub" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"stub\",\n    \"syntax\": \"stub:name\",\n    \"title\": \"Stub\",\n    \"description\": \"The stub component provides a simple way to stub out any physical endpoints while in development or testing.\",\n    \"label\": \"core,testing\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": true,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.stub.StubComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"queueSize\": { \"kind\": \"property\", \"displayName\": \"Queue Size\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"concurrentConsumers\": { \"kind\": \"property\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Sets the default number of concurrent threads processing exchanges.\" },\n    \"defaultQueueFactory\": { \"kind\": \"property\", \"displayName\": \"Default Queue Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.seda.BlockingQueueFactory<org.apache.camel.Exchange>\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default queue factory.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of queue\" },\n    \"size\": { \"kind\": \"parameter\", \"displayName\": \"Size\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 2147483647, \"description\": \"The maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"concurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Number of concurrent threads processing exchanges.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"limitConcurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Limit Concurrent Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off.\" },\n    \"multipleConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Multiple Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint.\" },\n    \"pollTimeout\": { \"kind\": \"parameter\", \"displayName\": \"Poll Timeout\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.\" },\n    \"purgeWhenStopping\": { \"kind\": \"parameter\", \"displayName\": \"Purge When Stopping\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded.\" },\n    \"blockWhenFull\": { \"kind\": \"parameter\", \"displayName\": \"Block When Full\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted.\" },\n    \"discardIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Discard If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"failIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Fail If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.\" },\n    \"waitForTaskToComplete\": { \"kind\": \"parameter\", \"displayName\": \"Wait For Task To Complete\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.WaitForTaskToComplete\", \"enum\": [ \"Never\", \"IfReplyExpected\", \"Always\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"IfReplyExpected\", \"description\": \"Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected.\" },\n    \"queue\": { \"kind\": \"parameter\", \"displayName\": \"Queue\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.BlockingQueue\", \"deprecated\": false, \"secret\": false, \"description\": \"Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "test" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"test\",\n    \"syntax\": \"test:name\",\n    \"title\": \"Test\",\n    \"description\": \"The test component extends the mock component by on startup to pull messages from another endpoint to set the expected message bodies.\",\n    \"label\": \"core,testing\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": true,\n    \"javaType\": \"org.apache.camel.component.test.TestComponent\",\n    \"firstVersion\": \"1.3.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of endpoint to lookup in the registry to use for polling messages used for testing\" },\n    \"anyOrder\": { \"kind\": \"parameter\", \"displayName\": \"Any Order\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the expected messages should arrive in the same order or can be in any order.\" },\n    \"assertPeriod\": { \"kind\": \"parameter\", \"displayName\": \"Assert Period\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled.\" },\n    \"delimiter\": { \"kind\": \"parameter\", \"displayName\": \"Delimiter\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The split delimiter to use when split is enabled. By default the delimiter is new line based. The delimiter can be a regular expression.\" },\n    \"expectedCount\": { \"kind\": \"parameter\", \"displayName\": \"Expected Count\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n'th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details.\" },\n    \"reportGroup\": { \"kind\": \"parameter\", \"displayName\": \"Report Group\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"A number that is used to turn on throughput logging based on groups of the size.\" },\n    \"resultMinimumWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Minimum Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"resultWaitTime\": { \"kind\": \"parameter\", \"displayName\": \"Result Wait Time\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied\" },\n    \"retainFirst\": { \"kind\": \"parameter\", \"displayName\": \"Retain First\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the first n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"retainLast\": { \"kind\": \"parameter\", \"displayName\": \"Retain Last\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Specifies to only retain the last n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received.\" },\n    \"sleepForEmptyTest\": { \"kind\": \"parameter\", \"displayName\": \"Sleep For Empty Test\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero\" },\n    \"split\": { \"kind\": \"parameter\", \"displayName\": \"Split\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled the the messages loaded from the test endpoint will be split using new line delimiters so each line is an expected message. For example to use a file endpoint to load a file where each line is an expected message.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 2000, \"description\": \"The timeout to use when polling for message bodies from the URI\" },\n    \"copyOnExchange\": { \"kind\": \"parameter\", \"displayName\": \"Copy On Exchange\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "timer" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"timer\",\n    \"syntax\": \"timer:timerName\",\n    \"title\": \"Timer\",\n    \"description\": \"The timer component is used for generating message exchanges when a timer fires.\",\n    \"label\": \"core,scheduling\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": true,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.timer.TimerComponent\",\n    \"firstVersion\": \"1.0.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"timerName\": { \"kind\": \"path\", \"displayName\": \"Timer Name\", \"group\": \"consumer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the timer\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"The number of milliseconds to wait before the first event is generated. Should not be used in conjunction with the time option. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"fixedRate\": { \"kind\": \"parameter\", \"displayName\": \"Fixed Rate\", \"group\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Events take place at approximately regular intervals separated by the specified period.\" },\n    \"period\": { \"kind\": \"parameter\", \"displayName\": \"Period\", \"group\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"If greater than 0 generate periodic events every period milliseconds. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"repeatCount\": { \"kind\": \"parameter\", \"displayName\": \"Repeat Count\", \"group\": \"consumer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"Specifies a maximum limit of number of fires. So if you set it to 1 the timer will only fire once. If you set it to 5 it will only fire five times. A value of zero or negative means fire forever.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"daemon\": { \"kind\": \"parameter\", \"displayName\": \"Daemon\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Specifies whether or not the thread associated with the timer endpoint runs as a daemon. The default value is true.\" },\n    \"pattern\": { \"kind\": \"parameter\", \"displayName\": \"Pattern\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows you to specify a custom Date pattern to use for setting the time option using URI syntax.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"time\": { \"kind\": \"parameter\", \"displayName\": \"Time\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.util.Date\", \"deprecated\": false, \"secret\": false, \"description\": \"A java.util.Date the first event should be generated. If using the URI the pattern expected is: yyyy-MM-dd HH:mm:ss or yyyy-MM-dd'T'HH:mm:ss.\" },\n    \"timer\": { \"kind\": \"parameter\", \"displayName\": \"Timer\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.Timer\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom Timer\" }\n  }\n}\n\n",
      "validator" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"validator\",\n    \"syntax\": \"validator:resourceUri\",\n    \"title\": \"Validator\",\n    \"description\": \"Validates the payload of a message using XML Schema and JAXP Validation.\",\n    \"label\": \"core,validation\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.validator.ValidatorComponent\",\n    \"firstVersion\": \"1.1.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resourceResolverFactory\": { \"kind\": \"property\", \"displayName\": \"Resource Resolver Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.validator.ValidatorResourceResolverFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"resourceUri\": { \"kind\": \"path\", \"displayName\": \"Resource Uri\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL to a local resource on the classpathor a reference to lookup a bean in the Registry or a full URL to a remote resource or resource on the file system which contains the XSD to validate against.\" },\n    \"failOnNullBody\": { \"kind\": \"parameter\", \"displayName\": \"Fail On Null Body\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to fail if no body exists.\" },\n    \"failOnNullHeader\": { \"kind\": \"parameter\", \"displayName\": \"Fail On Null Header\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to fail if no header exists when validating against a header.\" },\n    \"headerName\": { \"kind\": \"parameter\", \"displayName\": \"Header Name\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To validate against a header instead of the message body.\" },\n    \"errorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Error Handler\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.processor.validation.ValidatorErrorHandler\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler. The default error handler captures the errors and throws an exception.\" },\n    \"resourceResolver\": { \"kind\": \"parameter\", \"displayName\": \"Resource Resolver\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.w3c.dom.ls.LSResourceResolver\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom LSResourceResolver. See also link setResourceResolverFactory(ValidatorResourceResolverFactory)\" },\n    \"resourceResolverFactory\": { \"kind\": \"parameter\", \"displayName\": \"Resource Resolver Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.validator.ValidatorResourceResolverFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"For creating a resource resolver which depends on the endpoint resource URI. Must not be used in combination with method link setResourceResolver(LSResourceResolver). If not set then DefaultValidatorResourceResolverFactory is used\" },\n    \"schemaFactory\": { \"kind\": \"parameter\", \"displayName\": \"Schema Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"javax.xml.validation.SchemaFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom javax.xml.validation.SchemaFactory\" },\n    \"schemaLanguage\": { \"kind\": \"parameter\", \"displayName\": \"Schema Language\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"http://www.w3.org/2001/XMLSchema\", \"description\": \"Configures the W3C XML Schema Namespace URI.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"useDom\": { \"kind\": \"parameter\", \"displayName\": \"Use Dom\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether DOMSource/DOMResult or SaxSource/SaxResult should be used by the validator.\" },\n    \"useSharedSchema\": { \"kind\": \"parameter\", \"displayName\": \"Use Shared Schema\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the Schema instance should be shared or not. This option is introduced to work around a JDK 1.6.x bug. Xerces should not have this issue.\" }\n  }\n}\n\n",
      "vm" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"vm\",\n    \"syntax\": \"vm:name\",\n    \"title\": \"VM\",\n    \"description\": \"The vm component provides asynchronous call to another endpoint from the same CamelContext.\",\n    \"label\": \"core,endpoint\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": true,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.vm.VmComponent\",\n    \"firstVersion\": \"1.1.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"queueSize\": { \"kind\": \"property\", \"displayName\": \"Queue Size\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"concurrentConsumers\": { \"kind\": \"property\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Sets the default number of concurrent threads processing exchanges.\" },\n    \"defaultQueueFactory\": { \"kind\": \"property\", \"displayName\": \"Default Queue Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.seda.BlockingQueueFactory<org.apache.camel.Exchange>\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default queue factory.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of queue\" },\n    \"size\": { \"kind\": \"parameter\", \"displayName\": \"Size\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 2147483647, \"description\": \"The maximum capacity of the SEDA queue (i.e. the number of messages it can hold).\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"concurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Concurrent Consumers\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"Number of concurrent threads processing exchanges.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the default exchange pattern when creating an exchange.\" },\n    \"limitConcurrentConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Limit Concurrent Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off.\" },\n    \"multipleConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Multiple Consumers\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint.\" },\n    \"pollTimeout\": { \"kind\": \"parameter\", \"displayName\": \"Poll Timeout\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.\" },\n    \"purgeWhenStopping\": { \"kind\": \"parameter\", \"displayName\": \"Purge When Stopping\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded.\" },\n    \"blockWhenFull\": { \"kind\": \"parameter\", \"displayName\": \"Block When Full\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted.\" },\n    \"discardIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Discard If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"failIfNoConsumers\": { \"kind\": \"parameter\", \"displayName\": \"Fail If No Consumers\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.\" },\n    \"timeout\": { \"kind\": \"parameter\", \"displayName\": \"Timeout\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.\" },\n    \"waitForTaskToComplete\": { \"kind\": \"parameter\", \"displayName\": \"Wait For Task To Complete\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.WaitForTaskToComplete\", \"enum\": [ \"Never\", \"IfReplyExpected\", \"Always\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"IfReplyExpected\", \"description\": \"Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected.\" },\n    \"queue\": { \"kind\": \"parameter\", \"displayName\": \"Queue\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.BlockingQueue\", \"deprecated\": false, \"secret\": false, \"description\": \"Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n",
      "xslt" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"xslt\",\n    \"syntax\": \"xslt:resourceUri\",\n    \"title\": \"XSLT\",\n    \"description\": \"Transforms the message using a XSLT template.\",\n    \"label\": \"core,transformation\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.xslt.XsltComponent\",\n    \"firstVersion\": \"1.3.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-core\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"xmlConverter\": { \"kind\": \"property\", \"displayName\": \"Xml Converter\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.converter.jaxp.XmlConverter\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter\" },\n    \"uriResolverFactory\": { \"kind\": \"property\", \"displayName\": \"Uri Resolver Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.xslt.XsltUriResolverFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom UriResolver which depends on a dynamic endpoint resource URI. Should not be used together with the option 'uriResolver'.\" },\n    \"uriResolver\": { \"kind\": \"property\", \"displayName\": \"Uri Resolver\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"javax.xml.transform.URIResolver\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom UriResolver. Should not be used together with the option 'uriResolverFactory'.\" },\n    \"contentCache\": { \"kind\": \"property\", \"displayName\": \"Content Cache\", \"group\": \"producer\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.\" },\n    \"saxon\": { \"kind\": \"property\", \"displayName\": \"Saxon\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.\" },\n    \"saxonExtensionFunctions\": { \"kind\": \"property\", \"displayName\": \"Saxon Extension Functions\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add camel-saxon to the classpath. The function is looked up in the registry where you can comma to separate multiple values to lookup.\" },\n    \"saxonConfiguration\": { \"kind\": \"property\", \"displayName\": \"Saxon Configuration\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.lang.Object\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom Saxon configuration\" },\n    \"saxonConfigurationProperties\": { \"kind\": \"property\", \"displayName\": \"Saxon Configuration Properties\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"To set custom Saxon configuration properties\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"resourceUri\": { \"kind\": \"path\", \"displayName\": \"Resource Uri\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Path to the template. The following is supported by the default URIResolver. You can prefix with: classpath file http ref or bean. classpath file and http loads the resource using these protocols (classpath is default). ref will lookup the resource in the registry. bean will call a method on a bean to be used as the resource. For bean you can specify the method name after dot eg bean:myBean.myMethod\" },\n    \"allowStAX\": { \"kind\": \"parameter\", \"displayName\": \"Allow StAX\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to allow using StAX as the javax.xml.transform.Source.\" },\n    \"contentCache\": { \"kind\": \"parameter\", \"displayName\": \"Content Cache\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.\" },\n    \"deleteOutputFile\": { \"kind\": \"parameter\", \"displayName\": \"Delete Output File\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If you have output=file then this option dictates whether or not the output file should be deleted when the Exchange is done processing. For example suppose the output file is a temporary file then it can be a good idea to delete it after use.\" },\n    \"failOnNullBody\": { \"kind\": \"parameter\", \"displayName\": \"Fail On Null Body\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether or not to throw an exception if the input body is null.\" },\n    \"output\": { \"kind\": \"parameter\", \"displayName\": \"Output\", \"group\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.xslt.XsltOutput\", \"enum\": [ \"string\", \"bytes\", \"DOM\", \"file\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"string\", \"description\": \"Option to specify which output type to use. Possible values are: string bytes DOM file. The first three options are all in memory based where as file is streamed directly to a java.io.File. For file you must specify the filename in the IN header with the key Exchange.XSLT_FILE_NAME which is also CamelXsltFileName. Also any paths leading to the filename must be created beforehand otherwise an exception is thrown at runtime.\" },\n    \"saxon\": { \"kind\": \"parameter\", \"displayName\": \"Saxon\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.\" },\n    \"transformerCacheSize\": { \"kind\": \"parameter\", \"displayName\": \"Transformer Cache Size\", \"group\": \"producer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 0, \"description\": \"The number of javax.xml.transform.Transformer object that are cached for reuse to avoid calls to Template.newTransformer().\" },\n    \"converter\": { \"kind\": \"parameter\", \"displayName\": \"Converter\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.converter.jaxp.XmlConverter\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter\" },\n    \"entityResolver\": { \"kind\": \"parameter\", \"displayName\": \"Entity Resolver\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.xml.sax.EntityResolver\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom org.xml.sax.EntityResolver with javax.xml.transform.sax.SAXSource.\" },\n    \"errorListener\": { \"kind\": \"parameter\", \"displayName\": \"Error Listener\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"javax.xml.transform.ErrorListener\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows to configure to use a custom javax.xml.transform.ErrorListener. Beware when doing this then the default error listener which captures any errors or fatal errors and store information on the Exchange as properties is not in use. So only use this option for special use-cases.\" },\n    \"resultHandlerFactory\": { \"kind\": \"parameter\", \"displayName\": \"Result Handler Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.builder.xml.ResultHandlerFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows you to use a custom org.apache.camel.builder.xml.ResultHandlerFactory which is capable of using custom org.apache.camel.builder.xml.ResultHandler types.\" },\n    \"saxonConfiguration\": { \"kind\": \"parameter\", \"displayName\": \"Saxon Configuration\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.lang.Object\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom Saxon configuration\" },\n    \"saxonExtensionFunctions\": { \"kind\": \"parameter\", \"displayName\": \"Saxon Extension Functions\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add camel-saxon to the classpath. The function is looked up in the registry where you can comma to separate multiple values to lookup.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"transformerFactory\": { \"kind\": \"parameter\", \"displayName\": \"Transformer Factory\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"javax.xml.transform.TransformerFactory\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom XSLT transformer factory\" },\n    \"transformerFactoryClass\": { \"kind\": \"parameter\", \"displayName\": \"Transformer Factory Class\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom XSLT transformer factory specified as a FQN class name\" },\n    \"uriResolver\": { \"kind\": \"parameter\", \"displayName\": \"Uri Resolver\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"javax.xml.transform.URIResolver\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom javax.xml.transform.URIResolver\" }\n  }\n}\n\n"
    }
  },
  "gav" : "org.apache.camel:camel-core:2.20.0"
}, {
  "component" : {
    "meta" : {
      "spring-event" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"spring-event\",\n    \"syntax\": \"spring-event:name\",\n    \"title\": \"Spring Event\",\n    \"description\": \"The spring-event component allows to listen for Spring Application Events.\",\n    \"label\": \"spring,eventbus\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.event.EventComponent\",\n    \"firstVersion\": \"1.4.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-spring\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"name\": { \"kind\": \"path\", \"displayName\": \"Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Name of endpoint\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
    }
  },
  "gav" : "org.apache.camel:camel-spring:2.20.0"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "twitter-search",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-twitter",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.twitter.search.TwitterSearchComponent",
      "name" : "TwitterSearch",
      "scheme" : "twitter-search-connector",
      "javaType" : "io.syndesis.search.TwitterSearchComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "twitter-search-connector",
      "version" : "0.5.8",
      "description" : "Search for twitter",
      "labels" : [ "twitter" ],
      "pattern" : "From",
      "inputDataType" : "none",
      "outputDataType" : "java:twitter4j.Status",
      "componentOptions" : [ "accessToken", "accessTokenSecret", "consumerKey", "consumerSecret" ],
      "endpointOptions" : [ "delay", "keywords", "filterOld" ],
      "endpointValues" : {
        "delay" : 5000
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"twitter-search\",\n    \"scheme\":\"twitter-search-connector\",\n    \"syntax\":\"twitter-search-connector:keywords\",\n    \"title\":\"TwitterSearch\",\n    \"description\":\"Search for twitter\",\n    \"label\":\"twitter\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.search.TwitterSearchComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"twitter-search-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"accessToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token\"\n    },\n    \"accessTokenSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token secret\"\n    },\n    \"consumerKey\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Key\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer key\"\n    },\n    \"consumerSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer secret\"\n    }\n  },\n  \"properties\":{\n    \"keywords\":{\n      \"kind\":\"path\",\n      \"displayName\":\"Keywords\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"The search keywords. Multiple values can be separated with comma.\"\n    },\n    \"filterOld\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Filter Old\",\n      \"group\":\"filter\",\n      \"label\":\"consumer,filter\",\n      \"required\":false,\n      \"type\":\"boolean\",\n      \"javaType\":\"boolean\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":true,\n      \"description\":\"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\"\n    },\n    \"delay\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Delay\",\n      \"group\":\"scheduler\",\n      \"label\":\"consumer,scheduler\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"optionalPrefix\":\"consumer.\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":5000,\n      \"description\":\"Milliseconds before the next poll.\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "twitter-search-connector" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"twitter-search\",\n    \"scheme\":\"twitter-search-connector\",\n    \"syntax\":\"twitter-search-connector:keywords\",\n    \"title\":\"TwitterSearch\",\n    \"description\":\"Search for twitter\",\n    \"label\":\"twitter\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.search.TwitterSearchComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"twitter-search-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"accessToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token\"\n    },\n    \"accessTokenSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Access Token Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The access token secret\"\n    },\n    \"consumerKey\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Key\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer key\"\n    },\n    \"consumerSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Consumer Secret\",\n      \"group\":\"security\",\n      \"label\":\"security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"The consumer secret\"\n    }\n  },\n  \"properties\":{\n    \"keywords\":{\n      \"kind\":\"path\",\n      \"displayName\":\"Keywords\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"The search keywords. Multiple values can be separated with comma.\"\n    },\n    \"filterOld\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Filter Old\",\n      \"group\":\"filter\",\n      \"label\":\"consumer,filter\",\n      \"required\":false,\n      \"type\":\"boolean\",\n      \"javaType\":\"boolean\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":true,\n      \"description\":\"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\"\n    },\n    \"delay\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"Delay\",\n      \"group\":\"scheduler\",\n      \"label\":\"consumer,scheduler\",\n      \"required\":false,\n      \"type\":\"integer\",\n      \"javaType\":\"long\",\n      \"optionalPrefix\":\"consumer.\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":5000,\n      \"description\":\"Milliseconds before the next poll.\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"twitter-search\",\n    \"syntax\": \"twitter-search:keywords\",\n    \"title\": \"Twitter Search\",\n    \"description\": \"The Twitter Search component consumes search results.\",\n    \"label\": \"api,social\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.twitter.search.TwitterSearchComponent\",\n    \"firstVersion\": \"2.10.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-twitter\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"accessToken\": { \"kind\": \"property\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token\" },\n    \"accessTokenSecret\": { \"kind\": \"property\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token secret\" },\n    \"consumerKey\": { \"kind\": \"property\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key\" },\n    \"consumerSecret\": { \"kind\": \"property\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter.\" },\n    \"httpProxyUser\": { \"kind\": \"property\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"keywords\": { \"kind\": \"path\", \"displayName\": \"Keywords\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The search keywords. Multiple values can be separated with comma.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"type\": { \"kind\": \"parameter\", \"displayName\": \"Type\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.twitter.data.EndpointType\", \"enum\": [ \"polling\", \"direct\", \"event\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"polling\", \"description\": \"Endpoint type to use. Only streaming supports event type.\" },\n    \"distanceMetric\": { \"kind\": \"parameter\", \"displayName\": \"Distance Metric\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"enum\": [ \"km\", \"mi\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"km\", \"description\": \"Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"latitude\": { \"kind\": \"parameter\", \"displayName\": \"Latitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"locations\": { \"kind\": \"parameter\", \"displayName\": \"Locations\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon.\" },\n    \"longitude\": { \"kind\": \"parameter\", \"displayName\": \"Longitude\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"radius\": { \"kind\": \"parameter\", \"displayName\": \"Radius\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"number\", \"javaType\": \"java.lang.Double\", \"deprecated\": false, \"secret\": false, \"description\": \"Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric.\" },\n    \"twitterStream\": { \"kind\": \"parameter\", \"displayName\": \"Twitter Stream\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"twitter4j.TwitterStream\", \"deprecated\": false, \"secret\": false, \"description\": \"To use a custom instance of TwitterStream\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"count\": { \"kind\": \"parameter\", \"displayName\": \"Count\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limiting number of results per page.\" },\n    \"filterOld\": { \"kind\": \"parameter\", \"displayName\": \"Filter Old\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id.\" },\n    \"lang\": { \"kind\": \"parameter\", \"displayName\": \"Lang\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The lang string ISO_639-1 which will be used for searching\" },\n    \"numberOfPages\": { \"kind\": \"parameter\", \"displayName\": \"Number Of Pages\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The number of pages result which you want camel-twitter to consume.\" },\n    \"sinceId\": { \"kind\": \"parameter\", \"displayName\": \"Since Id\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1, \"description\": \"The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.\" },\n    \"userIds\": { \"kind\": \"parameter\", \"displayName\": \"User Ids\", \"group\": \"filter\", \"label\": \"consumer,filter\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"To filter by user ids for streaming/filter. Multiple values can be separated by comma.\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 30000, \"description\": \"Milliseconds before the next poll.\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" },\n    \"sortById\": { \"kind\": \"parameter\", \"displayName\": \"Sort By Id\", \"group\": \"sort\", \"label\": \"consumer,sort\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sorts by id so the oldest are first and newest last.\" },\n    \"httpProxyHost\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPassword\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Password\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyPort\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"httpProxyUser\": { \"kind\": \"parameter\", \"displayName\": \"Http Proxy User\", \"group\": \"proxy\", \"label\": \"proxy\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessToken\": { \"kind\": \"parameter\", \"displayName\": \"Access Token\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access token. Can also be configured on the TwitterComponent level instead.\" },\n    \"accessTokenSecret\": { \"kind\": \"parameter\", \"displayName\": \"Access Token Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The access secret. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerKey\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Key\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer key. Can also be configured on the TwitterComponent level instead.\" },\n    \"consumerSecret\": { \"kind\": \"parameter\", \"displayName\": \"Consumer Secret\", \"group\": \"security\", \"label\": \"security\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"The consumer secret. Can also be configured on the TwitterComponent level instead.\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:twitter-search-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceOnCreate",
      "scheme" : "salesforce-on-create",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceOnCreateComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-on-create",
      "version" : "0.5.8",
      "description" : "Get notifications when Salesforce object is created",
      "labels" : [ "salesforce" ],
      "pattern" : "From",
      "inputDataType" : "none",
      "outputDataType" : "json",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "updateTopic" : "true",
        "notifyForFields" : "ALL",
        "notifyForOperationCreate" : "true",
        "notifyForOperationUpdate" : "false",
        "notifyForOperationDelete" : "false",
        "notifyForOperationUndelete" : "false",
        "sObjectClass" : "io.syndesis.connector.salesforce.SalesforceIdentifier"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-create\",\n    \"syntax\":\"salesforce-on-create:operationName:topicName\",\n    \"title\":\"SalesforceOnCreate\",\n    \"description\":\"Get notifications when Salesforce object is created\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnCreateComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-create-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-on-create" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-create\",\n    \"syntax\":\"salesforce-on-create:operationName:topicName\",\n    \"title\":\"SalesforceOnCreate\",\n    \"description\":\"Get notifications when Salesforce object is created\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnCreateComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-create-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-on-create-connector:0.5.8"
}, {
  "component" : {
    "meta" : {
      "salesforce" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
    }
  },
  "gav" : "org.apache.camel:camel-salesforce:2.20.0"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceOnUpdate",
      "scheme" : "salesforce-on-update",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceOnUpdateComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-on-update",
      "version" : "0.5.8",
      "description" : "Get notifications when Salesforce object is updated",
      "labels" : [ "salesforce" ],
      "pattern" : "From",
      "inputDataType" : "none",
      "outputDataType" : "json",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "updateTopic" : "true",
        "notifyForFields" : "ALL",
        "notifyForOperationCreate" : "false",
        "notifyForOperationUpdate" : "true",
        "notifyForOperationDelete" : "false",
        "notifyForOperationUndelete" : "false",
        "sObjectClass" : "io.syndesis.connector.salesforce.SalesforceIdentifier"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-update\",\n    \"syntax\":\"salesforce-on-update:operationName:topicName\",\n    \"title\":\"SalesforceOnUpdate\",\n    \"description\":\"Get notifications when Salesforce object is updated\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnUpdateComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-update-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-on-update" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-update\",\n    \"syntax\":\"salesforce-on-update:operationName:topicName\",\n    \"title\":\"SalesforceOnUpdate\",\n    \"description\":\"Get notifications when Salesforce object is updated\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnUpdateComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-update-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-on-update-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceOnDelete",
      "scheme" : "salesforce-on-delete",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceOnDeleteComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-on-delete",
      "version" : "0.5.8",
      "description" : "Get notifications when Salesforce object is deleted",
      "labels" : [ "salesforce" ],
      "pattern" : "From",
      "inputDataType" : "none",
      "outputDataType" : "java:io.syndesis.connector.salesforce.SalesforceIdentifier",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "updateTopic" : "true",
        "notifyForFields" : "ALL",
        "notifyForOperationCreate" : "false",
        "notifyForOperationUpdate" : "false",
        "notifyForOperationDelete" : "true",
        "notifyForOperationUndelete" : "false",
        "sObjectClass" : "io.syndesis.connector.salesforce.SalesforceIdentifier"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-delete\",\n    \"syntax\":\"salesforce-on-delete:operationName:topicName\",\n    \"title\":\"SalesforceOnDelete\",\n    \"description\":\"Get notifications when Salesforce object is deleted\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnDeleteComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-delete-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-on-delete" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-on-delete\",\n    \"syntax\":\"salesforce-on-delete:operationName:topicName\",\n    \"title\":\"SalesforceOnDelete\",\n    \"description\":\"Get notifications when Salesforce object is deleted\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"consumerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceOnDeleteComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-on-delete-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-on-delete-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceUpdateSObject",
      "scheme" : "salesforce-update-sobject",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceUpdateSObjectComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-update-sobject-connector",
      "version" : "0.5.8",
      "description" : "Update Salesforce SObject",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "json",
      "outputDataType" : "none",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "updateSObject",
        "sObjectName" : "Contact",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-update-sobject\",\n    \"syntax\":\"salesforce-update-sobject:operationName:topicName\",\n    \"title\":\"SalesforceUpdateSObject\",\n    \"description\":\"Update Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceUpdateSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-update-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-update-sobject" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-update-sobject\",\n    \"syntax\":\"salesforce-update-sobject:operationName:topicName\",\n    \"title\":\"SalesforceUpdateSObject\",\n    \"description\":\"Update Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceUpdateSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-update-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-update-sobject-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceUpsertSObject",
      "scheme" : "salesforce-upsert-sobject",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceUpsertSObjectComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-upsert-sobject-connector",
      "version" : "0.5.8",
      "description" : "Upsert Salesforce SObject",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "json",
      "outputDataType" : "java:org.apache.camel.component.salesforce.api.dto.CreateSObjectResult",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "upsertSObject",
        "sObjectName" : "Contact",
        "sObjectIdName" : "Id",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName", "sObjectIdName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        },
        "sObjectIdName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-upsert-sobject\",\n    \"syntax\":\"salesforce-upsert-sobject:operationName:topicName\",\n    \"title\":\"SalesforceUpsertSObject\",\n    \"description\":\"Upsert Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceUpsertSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-upsert-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-upsert-sobject" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-upsert-sobject\",\n    \"syntax\":\"salesforce-upsert-sobject:operationName:topicName\",\n    \"title\":\"SalesforceUpsertSObject\",\n    \"description\":\"Upsert Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceUpsertSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-upsert-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-upsert-sobject-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceCreateSObject",
      "scheme" : "salesforce-create-sobject",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceCreateSObjectComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-create-sobject-connector",
      "version" : "0.5.8",
      "description" : "Create Salesforce SObject",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "json",
      "outputDataType" : "java:org.apache.camel.component.salesforce.api.dto.CreateSObjectResult",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "createSObject",
        "sObjectName" : "Contact",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-create-sobject\",\n    \"syntax\":\"salesforce-create-sobject:operationName:topicName\",\n    \"title\":\"SalesforceCreateSObject\",\n    \"description\":\"Create Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceCreateSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-create-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-create-sobject" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-create-sobject\",\n    \"syntax\":\"salesforce-create-sobject:operationName:topicName\",\n    \"title\":\"SalesforceCreateSObject\",\n    \"description\":\"Create Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceCreateSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-create-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-create-sobject-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceGetSObject",
      "scheme" : "salesforce-get-sobject",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceGetSObjectComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-get-sobject-connector",
      "version" : "0.5.8",
      "description" : "Get Salesforce SObject",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "java:io.syndesis.connector.salesforce.SalesforceIdentifier",
      "outputDataType" : "json",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "getSObject",
        "sObjectName" : "Contact",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-get-sobject\",\n    \"syntax\":\"salesforce-get-sobject:operationName:topicName\",\n    \"title\":\"SalesforceGetSObject\",\n    \"description\":\"Get Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceGetSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-get-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-get-sobject" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-get-sobject\",\n    \"syntax\":\"salesforce-get-sobject:operationName:topicName\",\n    \"title\":\"SalesforceGetSObject\",\n    \"description\":\"Get Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceGetSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-get-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-get-sobject-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceGetSObjectWithId",
      "scheme" : "salesforce-get-sobject-with-id",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceGetSObjectWithIdComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-get-sobject-with-id-connector",
      "version" : "0.5.8",
      "description" : "Get Salesforce SObject With External ID",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "java:io.syndesis.connector.salesforce.SalesforceIdentifier",
      "outputDataType" : "json",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "getSObjectWithId",
        "sObjectName" : "Contact",
        "sObjectIdName" : "Id",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName", "sObjectIdName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        },
        "sObjectIdName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-get-sobject-with-id\",\n    \"syntax\":\"salesforce-get-sobject-with-id:operationName:topicName\",\n    \"title\":\"SalesforceGetSObjectWithId\",\n    \"description\":\"Get Salesforce SObject With External ID\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceGetSObjectWithIdComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-get-sobject-with-id-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-get-sobject-with-id" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-get-sobject-with-id\",\n    \"syntax\":\"salesforce-get-sobject-with-id:operationName:topicName\",\n    \"title\":\"SalesforceGetSObjectWithId\",\n    \"description\":\"Get Salesforce SObject With External ID\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceGetSObjectWithIdComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-get-sobject-with-id-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-get-sobject-with-id-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceDeleteSObject",
      "scheme" : "salesforce-delete-sobject",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceDeleteSObjectComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-delete-sobject-connector",
      "version" : "0.5.8",
      "description" : "Delete Salesforce SObject",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "java:io.syndesis.connector.salesforce.SalesforceIdentifier",
      "outputDataType" : "none",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "deleteSObject",
        "sObjectName" : "Contact",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-delete-sobject\",\n    \"syntax\":\"salesforce-delete-sobject:operationName:topicName\",\n    \"title\":\"SalesforceDeleteSObject\",\n    \"description\":\"Delete Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceDeleteSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-delete-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-delete-sobject" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-delete-sobject\",\n    \"syntax\":\"salesforce-delete-sobject:operationName:topicName\",\n    \"title\":\"SalesforceDeleteSObject\",\n    \"description\":\"Delete Salesforce SObject\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceDeleteSObjectComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-delete-sobject-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-delete-sobject-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "salesforce",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-salesforce",
      "baseVersion" : "2.20.0.fuse-000106",
      "baseJavaType" : "org.apache.camel.component.salesforce.SalesforceComponent",
      "name" : "SalesforceDeleteSObjectWithId",
      "scheme" : "salesforce-delete-sobject-with-id",
      "javaType" : "io.syndesis.connector.salesforce.SalesforceDeleteSObjectWithIdComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "salesforce-delete-sobject-with-id-connector",
      "version" : "0.5.8",
      "description" : "Delete Salesforce SObject With External ID",
      "labels" : [ "salesforce" ],
      "pattern" : "To",
      "inputDataType" : "java:io.syndesis.connector.salesforce.SalesforceIdentifier",
      "outputDataType" : "none",
      "globalOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "componentOptions" : [ "loginUrl", "clientId", "clientSecret", "refreshToken", "userName", "password" ],
      "endpointValues" : {
        "operationName" : "deleteSObjectWithId",
        "sObjectName" : "Contact",
        "sObjectIdName" : "Id",
        "rawPayload" : "true"
      },
      "endpointOptions" : [ "sObjectName", "sObjectIdName" ],
      "endpointOverrides" : {
        "sObjectName" : {
          "required" : "true"
        },
        "sObjectIdName" : {
          "required" : "true"
        }
      }
    },
    "schema" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-delete-sobject-with-id\",\n    \"syntax\":\"salesforce-delete-sobject-with-id:operationName:topicName\",\n    \"title\":\"SalesforceDeleteSObjectWithId\",\n    \"description\":\"Delete Salesforce SObject With External ID\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceDeleteSObjectWithIdComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-delete-sobject-with-id-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
  },
  "component" : {
    "meta" : {
      "salesforce-delete-sobject-with-id" : "{\n  \"component\":{\n    \"kind\":\"component\",\n    \"baseScheme\":\"salesforce\",\n    \"scheme\":\"salesforce-delete-sobject-with-id\",\n    \"syntax\":\"salesforce-delete-sobject-with-id:operationName:topicName\",\n    \"title\":\"SalesforceDeleteSObjectWithId\",\n    \"description\":\"Delete Salesforce SObject With External ID\",\n    \"label\":\"salesforce\",\n    \"deprecated\":false,\n    \"async\":false,\n    \"producerOnly\":true,\n    \"lenientProperties\":false,\n    \"javaType\":\"io.syndesis.connector.salesforce.SalesforceDeleteSObjectWithIdComponent\",\n    \"groupId\":\"io.syndesis\",\n    \"artifactId\":\"salesforce-delete-sobject-with-id-connector\",\n    \"version\":\"0.5.8\"\n  },\n  \"componentProperties\":{\n    \"loginUrl\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Login Url\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"https:\\/\\/login.salesforce.com\",\n      \"description\":\"URL of the Salesforce instance used for authentication by default set to https:\\/\\/login.salesforce.com\"\n    },\n    \"clientId\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Id\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\"\n    },\n    \"clientSecret\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Client Secret\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\"\n    },\n    \"refreshToken\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Refresh Token\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https:\\/\\/login.salesforce.com\\/services\\/oauth2\\/success or https:\\/\\/test.salesforce.com\\/services\\/oauth2\\/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\"\n    },\n    \"userName\":{\n      \"kind\":\"property\",\n      \"displayName\":\"User Name\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"description\":\"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\"\n    },\n    \"password\":{\n      \"kind\":\"property\",\n      \"displayName\":\"Password\",\n      \"group\":\"security\",\n      \"label\":\"common,security\",\n      \"required\":false,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":true,\n      \"description\":\"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\"\n    }\n  },\n  \"properties\":{\n    \"sObjectIdName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Id Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Id\",\n      \"description\":\"SObject external ID field name\"\n    },\n    \"sObjectName\":{\n      \"kind\":\"parameter\",\n      \"displayName\":\"SObject Name\",\n      \"group\":\"common\",\n      \"required\":true,\n      \"type\":\"string\",\n      \"javaType\":\"java.lang.String\",\n      \"deprecated\":false,\n      \"secret\":false,\n      \"defaultValue\":\"Contact\",\n      \"description\":\"SObject name if required or supported by API\"\n    }\n  },\n  \"connectorProperties\":{\n    \n  }\n}"
    },
    "schema" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"salesforce\",\n    \"syntax\": \"salesforce:operationName:topicName\",\n    \"title\": \"Salesforce\",\n    \"description\": \"The salesforce component is used for integrating Camel with the massive Salesforce API.\",\n    \"label\": \"api,cloud,crm\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.salesforce.SalesforceComponent\",\n    \"firstVersion\": \"2.12.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-salesforce\",\n    \"verifiers\": \"parameters,connectivity\",\n    \"version\": \"2.20.0.fuse-000106\"\n  },\n  \"componentProperties\": {\n    \"authenticationType\": { \"kind\": \"property\", \"displayName\": \"Authentication Type\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.AuthenticationType\", \"enum\": [ \"USERNAME_PASSWORD\", \"REFRESH_TOKEN\", \"JWT\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Explicit authentication method to be used one of USERNAME_PASSWORD REFRESH_TOKEN or JWT. Salesforce component can auto-determine the authentication method to use from the properties set set this property to eliminate any ambiguity.\" },\n    \"loginConfig\": { \"kind\": \"property\", \"displayName\": \"Login Config\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceLoginConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"All authentication configuration in one nested bean all properties set there can be set directly on the component as well\" },\n    \"instanceUrl\": { \"kind\": \"property\", \"displayName\": \"Instance Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"URL of the Salesforce instance used after authantication by default received from Salesforce on successful authentication\" },\n    \"loginUrl\": { \"kind\": \"property\", \"displayName\": \"Login Url\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"https://login.salesforce.com\", \"description\": \"URL of the Salesforce instance used for authentication by default set to https://login.salesforce.com\" },\n    \"clientId\": { \"kind\": \"property\", \"displayName\": \"Client Id\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"OAuth Consumer Key of the connected app configured in the Salesforce instance setup. Typically a connected app needs to be configured but one can be provided by installing a package.\" },\n    \"clientSecret\": { \"kind\": \"property\", \"displayName\": \"Client Secret\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup.\" },\n    \"keystore\": { \"kind\": \"property\", \"displayName\": \"Keystore\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.KeyStoreParameters\", \"deprecated\": false, \"secret\": true, \"description\": \"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry with private key and certificate. Salesforce does not verify the certificate chain so this can easily be a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app.\" },\n    \"refreshToken\": { \"kind\": \"property\", \"displayName\": \"Refresh Token\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web application and configure a callback URL to receive the refresh token or configure using the builtin callback at https://login.salesforce.com/services/oauth2/success or https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the end of the flow. Note that in development organizations Salesforce allows hosting the callback web application at localhost.\" },\n    \"userName\": { \"kind\": \"property\", \"displayName\": \"User Name\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows.\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password used in OAuth flow to gain access to access token. It's easy to get started with password OAuth flow but in general one should avoid it as it is deemed less secure than other flows. Make sure that you append security token to the end of the password if using one.\" },\n    \"lazyLogin\": { \"kind\": \"property\", \"displayName\": \"Lazy Login\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true prevents the component from authenticating to Salesforce with the start of the component. You would generaly set this to the (default) false and authenticate early and be immediately aware of any authentication issues.\" },\n    \"config\": { \"kind\": \"property\", \"displayName\": \"Config\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceEndpointConfig\", \"deprecated\": false, \"secret\": false, \"description\": \"Global endpoint configuration - use to set values that are common to all endpoints\" },\n    \"httpClientProperties\": { \"kind\": \"property\", \"displayName\": \"Http Client Properties\", \"group\": \"common (advanced)\", \"label\": \"common,advanced\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Used to set any properties that can be configured on the underlying HTTP client. Have a look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options.\" },\n    \"sslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Ssl Context Parameters\", \"group\": \"security\", \"label\": \"common,security\", \"required\": false, \"type\": \"object\", \"javaType\": \"org.apache.camel.util.jsse.SSLContextParameters\", \"deprecated\": false, \"secret\": false, \"description\": \"SSL parameters to use see SSLContextParameters class for all available options.\" },\n    \"useGlobalSslContextParameters\": { \"kind\": \"property\", \"displayName\": \"Use Global Ssl Context Parameters\", \"group\": \"security\", \"label\": \"security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enable usage of global SSL context parameters\" },\n    \"httpProxyHost\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Host\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Hostname of the HTTP proxy server to use.\" },\n    \"httpProxyPort\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Port\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Port number of the HTTP proxy server to use.\" },\n    \"httpProxyUsername\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Username\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Username to use to authenticate against the HTTP proxy server.\" },\n    \"httpProxyPassword\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Password\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password to use to authenticate against the HTTP proxy server.\" },\n    \"isHttpProxySocks4\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Socks4\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.\" },\n    \"isHttpProxySecure\": { \"kind\": \"property\", \"displayName\": \"Is Http Proxy Secure\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"If set to false disables the use of TLS when accessing the HTTP proxy.\" },\n    \"httpProxyIncludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Included Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should be used.\" },\n    \"httpProxyExcludedAddresses\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Excluded Addresses\", \"group\": \"proxy\", \"label\": \"common,proxy\", \"required\": false, \"type\": \"object\", \"javaType\": \"java.util.Set<java.lang.String>\", \"deprecated\": false, \"secret\": false, \"description\": \"A list of addresses for which HTTP proxy server should not be used.\" },\n    \"httpProxyAuthUri\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Auth Uri\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Used in authentication against the HTTP proxy server needs to match the URI of the proxy server in order for the httpProxyUsername and httpProxyPassword to be used for authentication.\" },\n    \"httpProxyRealm\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Realm\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Realm of the proxy server used in preemptive Basic/Digest authentication methods against the HTTP proxy server.\" },\n    \"httpProxyUseDigestAuth\": { \"kind\": \"property\", \"displayName\": \"Http Proxy Use Digest Auth\", \"group\": \"security\", \"label\": \"common,proxy,security\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set to true Digest authentication will be used when authenticating to the HTTP proxyotherwise Basic authorization method will be used\" },\n    \"packages\": { \"kind\": \"property\", \"displayName\": \"Packages\", \"group\": \"common\", \"label\": \"common\", \"required\": false, \"type\": \"array\", \"javaType\": \"java.lang.String[]\", \"deprecated\": false, \"secret\": false, \"description\": \"In what packages are the generated DTO classes. Typically the classes would be generated using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short SObject names in parameters/header values.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"operationName\": { \"kind\": \"path\", \"displayName\": \"Operation Name\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.OperationName\", \"enum\": [ \"getVersions\", \"getResources\", \"getGlobalObjects\", \"getBasicInfo\", \"getDescription\", \"getSObject\", \"createSObject\", \"updateSObject\", \"deleteSObject\", \"getSObjectWithId\", \"upsertSObject\", \"deleteSObjectWithId\", \"getBlobField\", \"query\", \"queryMore\", \"queryAll\", \"search\", \"apexCall\", \"recent\", \"createJob\", \"getJob\", \"closeJob\", \"abortJob\", \"createBatch\", \"getBatch\", \"getAllBatches\", \"getRequest\", \"getResults\", \"createBatchQuery\", \"getQueryResultIds\", \"getQueryResult\", \"getRecentReports\", \"getReportDescription\", \"executeSyncReport\", \"executeAsyncReport\", \"getReportInstances\", \"getReportResults\", \"limits\", \"approval\", \"approvals\", \"composite-tree\", \"composite-batch\" ], \"deprecated\": false, \"secret\": false, \"description\": \"The operation to use\" },\n    \"topicName\": { \"kind\": \"path\", \"displayName\": \"Topic Name\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"The name of the topic to use\" },\n    \"apexMethod\": { \"kind\": \"parameter\", \"displayName\": \"Apex Method\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method name\" },\n    \"apexQueryParams\": { \"kind\": \"parameter\", \"displayName\": \"Apex Query Params\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"deprecated\": false, \"secret\": false, \"description\": \"Query params for APEX method\" },\n    \"apexUrl\": { \"kind\": \"parameter\", \"displayName\": \"Apex Url\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"APEX method URL\" },\n    \"apiVersion\": { \"kind\": \"parameter\", \"displayName\": \"Api Version\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION\" },\n    \"backoffIncrement\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Increment\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"batchId\": { \"kind\": \"parameter\", \"displayName\": \"Batch Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Batch ID\" },\n    \"contentType\": { \"kind\": \"parameter\", \"displayName\": \"Content Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.bulk.ContentType\", \"enum\": [ \"XML\", \"CSV\", \"ZIP_XML\", \"ZIP_CSV\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API content type one of XML CSV ZIP_XML ZIP_CSV\" },\n    \"defaultReplayId\": { \"kind\": \"parameter\", \"displayName\": \"Default Replay Id\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"Default replayId setting if no value is found in link initialReplayIdMap\" },\n    \"format\": { \"kind\": \"parameter\", \"displayName\": \"Format\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.PayloadFormat\", \"enum\": [ \"JSON\", \"XML\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Payload format to use for Salesforce API calls either JSON or XML defaults to JSON\" },\n    \"httpClient\": { \"kind\": \"parameter\", \"displayName\": \"Http Client\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.SalesforceHttpClient\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jetty Http Client to use to connect to Salesforce.\" },\n    \"includeDetails\": { \"kind\": \"parameter\", \"displayName\": \"Include Details\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Include details in Salesforce1 Analytics report defaults to false.\" },\n    \"initialReplayIdMap\": { \"kind\": \"parameter\", \"displayName\": \"Initial Replay Id Map\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Long>\", \"deprecated\": false, \"secret\": false, \"description\": \"Replay IDs to start from per channel name.\" },\n    \"instanceId\": { \"kind\": \"parameter\", \"displayName\": \"Instance Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report execution instance ID\" },\n    \"jobId\": { \"kind\": \"parameter\", \"displayName\": \"Job Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Job ID\" },\n    \"limit\": { \"kind\": \"parameter\", \"displayName\": \"Limit\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"java.lang.Integer\", \"deprecated\": false, \"secret\": false, \"description\": \"Limit on number of returned records. Applicable to some of the API check the Salesforce documentation.\" },\n    \"maxBackoff\": { \"kind\": \"parameter\", \"displayName\": \"Max Backoff\", \"group\": \"common\", \"type\": \"integer\", \"javaType\": \"long\", \"deprecated\": false, \"secret\": false, \"description\": \"Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.\" },\n    \"notFoundBehaviour\": { \"kind\": \"parameter\", \"displayName\": \"Not Found Behaviour\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.NotFoundBehaviour\", \"enum\": [ \"EXCEPTION\", \"NULL\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the behaviour of 404 not found status received from Salesforce API. Should the body be set to NULL link NotFoundBehaviourNULL or should a exception be signaled on the exchange link NotFoundBehaviourEXCEPTION - the default.\" },\n    \"notifyForFields\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Fields\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum\", \"enum\": [ \"ALL\", \"REFERENCED\", \"SELECT\", \"WHERE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for fields options are ALL REFERENCED SELECT WHERE\" },\n    \"notifyForOperationCreate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Create\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for create operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationDelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Delete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperations\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operations\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum\", \"enum\": [ \"ALL\", \"CREATE\", \"EXTENDED\", \"UPDATE\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)\" },\n    \"notifyForOperationUndelete\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Undelete\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for un-delete operation defaults to false (API version = 29.0)\" },\n    \"notifyForOperationUpdate\": { \"kind\": \"parameter\", \"displayName\": \"Notify For Operation Update\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"java.lang.Boolean\", \"deprecated\": false, \"secret\": false, \"description\": \"Notify for update operation defaults to false (API version = 29.0)\" },\n    \"objectMapper\": { \"kind\": \"parameter\", \"displayName\": \"Object Mapper\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"com.fasterxml.jackson.databind.ObjectMapper\", \"deprecated\": false, \"secret\": false, \"description\": \"Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.\" },\n    \"rawPayload\": { \"kind\": \"parameter\", \"displayName\": \"Raw Payload\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Use raw payload String for request and response (either JSON or XML depending on format) instead of DTOs false by default\" },\n    \"reportId\": { \"kind\": \"parameter\", \"displayName\": \"Report Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report Id\" },\n    \"reportMetadata\": { \"kind\": \"parameter\", \"displayName\": \"Report Metadata\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce1 Analytics report metadata for filtering\" },\n    \"resultId\": { \"kind\": \"parameter\", \"displayName\": \"Result Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Bulk API Result ID\" },\n    \"sObjectBlobFieldName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Blob Field Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject blob field name\" },\n    \"sObjectClass\": { \"kind\": \"parameter\", \"displayName\": \"SObject Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin\" },\n    \"sObjectFields\": { \"kind\": \"parameter\", \"displayName\": \"SObject Fields\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject fields to retrieve\" },\n    \"sObjectId\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject ID if required by API\" },\n    \"sObjectIdName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field name\" },\n    \"sObjectIdValue\": { \"kind\": \"parameter\", \"displayName\": \"SObject Id Value\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject external ID field value\" },\n    \"sObjectName\": { \"kind\": \"parameter\", \"displayName\": \"SObject Name\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"SObject name if required or supported by API\" },\n    \"sObjectQuery\": { \"kind\": \"parameter\", \"displayName\": \"SObject Query\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOQL query string\" },\n    \"sObjectSearch\": { \"kind\": \"parameter\", \"displayName\": \"SObject Search\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Salesforce SOSL search string\" },\n    \"updateTopic\": { \"kind\": \"parameter\", \"displayName\": \"Update Topic\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to update an existing Push Topic when using the Streaming API defaults to false\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"replayId\": { \"kind\": \"parameter\", \"displayName\": \"Replay Id\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"java.lang.Long\", \"deprecated\": false, \"secret\": false, \"description\": \"The replayId value to use when subscribing\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
  },
  "gav" : "io.syndesis:salesforce-delete-sobject-with-id-connector:0.5.8"
}, {
  "connector" : {
    "meta" : {
      "baseScheme" : "sql-stored",
      "baseGroupId" : "org.apache.camel",
      "baseArtifactId" : "camel-sql",
      "baseVersion" : "2.20.0.fuse-000091",
      "baseJavaType" : "org.apache.camel.component.sql.stored.SqlStoredComponent",
      "name" : "SqlStoredConnector",
      "scheme" : "sql-stored-connector",
      "javaType" : "io.syndesis.connector.SqlStoredConnectorComponent",
      "groupId" : "io.syndesis",
      "artifactId" : "sql-stored-connector",
      "version" : "0.5.8",
      "description" : "SQL Stored Procedure Connector to invoke a SQL Stored Procedure",
      "labels" : [ "sql-stored" ],
      "pattern" : "To",
      "inputDataType" : "json",
      "outputDataType" : "json",
      "componentOptions" : [ "user", "password", "url", "schema", "catalog" ],
      "endpointOptions" : [ "procedureName", "template", "batch", "noop" ],
      "endpointValues" : { }
    },
    "schema" : "{\n  \"component\": {\n    \"kind\": \"component\",\n    \"baseScheme\": \"sql-stored\",\n    \"scheme\": \"sql-stored-connector\",\n    \"syntax\": \"sql-stored-connector:template\",\n    \"title\": \"SqlStoredConnector\",\n    \"description\": \"SQL Stored Procedure Connector to invoke a SQL Stored Procedure\",\n    \"label\": \"sql-stored\",\n    \"deprecated\": false,\n    \"async\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"io.syndesis.connector.SqlStoredConnectorComponent\",\n    \"groupId\": \"io.syndesis\",\n    \"artifactId\": \"sql-stored-connector\",\n    \"version\": \"0.5.8\"\n  },\n  \"componentProperties\": {\n    \"url\": { \"kind\": \"property\", \"displayName\": \"Connection URL\", \"group\": \"producer\", \"label\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"jdbc:postgresql:database\", \"description\": \"JDBC URL of the database\" },\n    \"user\": { \"kind\": \"property\", \"displayName\": \"Username\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"\", \"description\": \"Username for the database connection\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password for the database connection\" },\n    \"schema\": { \"kind\": \"property\", \"displayName\": \"Schema\", \"group\": \"producer\", \"label\": \"common\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Database schema\" },\n    \"catalog\": { \"kind\": \"property\", \"displayName\": \"Catalog\", \"group\": \"producer\", \"label\": \"common\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Database catalog\" }\n  },\n  \"properties\": {\n    \"procedureName\": { \"kind\": \"path\", \"displayName\": \"Template\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the StoredProcedure name to perform\" },\n    \"template\": { \"kind\": \"path\", \"displayName\": \"Template\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the StoredProcedure template to perform\" }\n  }\n}\n"
  },
  "component" : {
    "meta" : {
      "sql-stored-connector" : "{\n  \"component\": {\n    \"kind\": \"component\",\n    \"baseScheme\": \"sql-stored\",\n    \"scheme\": \"sql-stored-connector\",\n    \"syntax\": \"sql-stored-connector:template\",\n    \"title\": \"SqlStoredConnector\",\n    \"description\": \"SQL Stored Procedure Connector to invoke a SQL Stored Procedure\",\n    \"label\": \"sql-stored\",\n    \"deprecated\": false,\n    \"async\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"io.syndesis.connector.SqlStoredConnectorComponent\",\n    \"groupId\": \"io.syndesis\",\n    \"artifactId\": \"sql-stored-connector\",\n    \"version\": \"0.5.8\"\n  },\n  \"componentProperties\": {\n    \"url\": { \"kind\": \"property\", \"displayName\": \"Connection URL\", \"group\": \"producer\", \"label\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"jdbc:postgresql:database\", \"description\": \"JDBC URL of the database\" },\n    \"user\": { \"kind\": \"property\", \"displayName\": \"Username\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"\", \"description\": \"Username for the database connection\" },\n    \"password\": { \"kind\": \"property\", \"displayName\": \"Password\", \"group\": \"security\", \"label\": \"common,security\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": true, \"description\": \"Password for the database connection\" },\n    \"schema\": { \"kind\": \"property\", \"displayName\": \"Schema\", \"group\": \"producer\", \"label\": \"common\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Database schema\" },\n    \"catalog\": { \"kind\": \"property\", \"displayName\": \"Catalog\", \"group\": \"producer\", \"label\": \"common\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Database catalog\" }\n  },\n  \"properties\": {\n    \"procedureName\": { \"kind\": \"path\", \"displayName\": \"Template\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the StoredProcedure name to perform\" },\n    \"template\": { \"kind\": \"path\", \"displayName\": \"Template\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the StoredProcedure template to perform\" }\n  }\n}\n"
    }
  },
  "gav" : "io.syndesis:sql-stored-connector:0.5.8"
}, {
  "component" : {
    "meta" : {
      "sql" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"sql\",\n    \"syntax\": \"sql:query\",\n    \"title\": \"SQL\",\n    \"description\": \"The sql component allows you to work with databases using JDBC SQL queries.\",\n    \"label\": \"database,sql\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": false,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.sql.SqlComponent\",\n    \"firstVersion\": \"1.4.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-sql\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"dataSource\": { \"kind\": \"property\", \"displayName\": \"Data Source\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"javax.sql.DataSource\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the DataSource to use to communicate with the database.\" },\n    \"usePlaceholder\": { \"kind\": \"property\", \"displayName\": \"Use Placeholder\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries. This option is default true\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"query\": { \"kind\": \"path\", \"displayName\": \"Query\", \"group\": \"common\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.\" },\n    \"allowNamedParameters\": { \"kind\": \"parameter\", \"displayName\": \"Allow Named Parameters\", \"group\": \"common\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether to allow using named parameters in the queries.\" },\n    \"dataSource\": { \"kind\": \"parameter\", \"displayName\": \"Data Source\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"javax.sql.DataSource\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the DataSource to use to communicate with the database.\" },\n    \"dataSourceRef\": { \"kind\": \"parameter\", \"displayName\": \"Data Source Ref\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": true, \"secret\": false, \"description\": \"Sets the reference to a DataSource to lookup from the registry to use for communicating with the database.\" },\n    \"outputClass\": { \"kind\": \"parameter\", \"displayName\": \"Output Class\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Specify the full package and class name to use as conversion when outputType=SelectOne.\" },\n    \"outputHeader\": { \"kind\": \"parameter\", \"displayName\": \"Output Header\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Store the query result in a header instead of the message body. By default outputHeader == null and the query result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the query result and the original message body is preserved.\" },\n    \"outputType\": { \"kind\": \"parameter\", \"displayName\": \"Output Type\", \"group\": \"common\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.sql.SqlOutputType\", \"enum\": [ \"SelectOne\", \"SelectList\", \"StreamList\" ], \"deprecated\": false, \"secret\": false, \"defaultValue\": \"SelectList\", \"description\": \"Make the output of consumer or producer to SelectList as List of Map or SelectOne as single Java object in the following way: a) If the query has only single column then that JDBC Column object is returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long object. b) If the query has more than one column then it will return a Map of that result. c) If the outputClass is set then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with. d) If the query resulted in more than one rows it throws an non-unique result exception.\" },\n    \"separator\": { \"kind\": \"parameter\", \"displayName\": \"Separator\", \"group\": \"common\", \"type\": \"string\", \"javaType\": \"char\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \",\", \"description\": \"The separator to use when parameter values is taken from message body (if the body is a String type) to be inserted at placeholders. Notice if you use named parameters then a Map type is used instead. The default value is comma.\" },\n    \"breakBatchOnConsumeFail\": { \"kind\": \"parameter\", \"displayName\": \"Break Batch On Consume Fail\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether to break batch if onConsume failed.\" },\n    \"bridgeErrorHandler\": { \"kind\": \"parameter\", \"displayName\": \"Bridge Error Handler\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"expectedUpdateCount\": { \"kind\": \"parameter\", \"displayName\": \"Expected Update Count\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"defaultValue\": -1, \"description\": \"Sets an expected update count to validate when using onConsume.\" },\n    \"maxMessagesPerPoll\": { \"kind\": \"parameter\", \"displayName\": \"Max Messages Per Poll\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the maximum number of messages to poll\" },\n    \"onConsume\": { \"kind\": \"parameter\", \"displayName\": \"On Consume\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"After processing each row then this query can be executed if the Exchange was processed successfully for example to mark the row as processed. The query can have parameter.\" },\n    \"onConsumeBatchComplete\": { \"kind\": \"parameter\", \"displayName\": \"On Consume Batch Complete\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"After processing the entire batch this query can be executed to bulk update rows etc. The query cannot have parameters.\" },\n    \"onConsumeFailed\": { \"kind\": \"parameter\", \"displayName\": \"On Consume Failed\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"After processing each row then this query can be executed if the Exchange failed for example to mark the row as failed. The query can have parameter.\" },\n    \"routeEmptyResultSet\": { \"kind\": \"parameter\", \"displayName\": \"Route Empty Result Set\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether empty resultset should be allowed to be sent to the next hop. Defaults to false. So the empty resultset will be filtered out.\" },\n    \"sendEmptyMessageWhenIdle\": { \"kind\": \"parameter\", \"displayName\": \"Send Empty Message When Idle\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.\" },\n    \"transacted\": { \"kind\": \"parameter\", \"displayName\": \"Transacted\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enables or disables transaction. If enabled then if processing an exchange failed then the consumer break out processing any further exchanges to cause a rollback eager\" },\n    \"useIterator\": { \"kind\": \"parameter\", \"displayName\": \"Use Iterator\", \"group\": \"consumer\", \"label\": \"consumer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true.\" },\n    \"exceptionHandler\": { \"kind\": \"parameter\", \"displayName\": \"Exception Handler\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ExceptionHandler\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored.\" },\n    \"exchangePattern\": { \"kind\": \"parameter\", \"displayName\": \"Exchange Pattern\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.ExchangePattern\", \"enum\": [ \"InOnly\", \"RobustInOnly\", \"InOut\", \"InOptionalOut\", \"OutOnly\", \"RobustOutOnly\", \"OutIn\", \"OutOptionalIn\" ], \"deprecated\": false, \"secret\": false, \"description\": \"Sets the exchange pattern when the consumer creates an exchange.\" },\n    \"pollStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Poll Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.PollingConsumerPollStrategy\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.\" },\n    \"processingStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Processing Strategy\", \"group\": \"consumer (advanced)\", \"label\": \"consumer,advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.sql.SqlProcessingStrategy\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.\" },\n    \"batch\": { \"kind\": \"parameter\", \"displayName\": \"Batch\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enables or disables batch mode\" },\n    \"noop\": { \"kind\": \"parameter\", \"displayName\": \"Noop\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing\" },\n    \"useMessageBodyForSql\": { \"kind\": \"parameter\", \"displayName\": \"Use Message Body For Sql\", \"group\": \"producer\", \"label\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to use the message body as the SQL and then headers for parameters. If this option is enabled then the SQL in the uri is not used.\" },\n    \"alwaysPopulateStatement\": { \"kind\": \"parameter\", \"displayName\": \"Always Populate Statement\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there is 1 or more expected parameters to be set; for example this avoids reading the message body/headers for SQL queries with no parameters.\" },\n    \"parametersCount\": { \"kind\": \"parameter\", \"displayName\": \"Parameters Count\", \"group\": \"producer (advanced)\", \"label\": \"producer,advanced\", \"type\": \"integer\", \"javaType\": \"int\", \"deprecated\": false, \"secret\": false, \"description\": \"If set greater than zero then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API. This is useful if the JDBC vendor could not return correct parameters count then user may override instead.\" },\n    \"placeholder\": { \"kind\": \"parameter\", \"displayName\": \"Placeholder\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"#\", \"description\": \"Specifies a character that will be replaced to in SQL query. Notice that it is simple String.replaceAll() operation and no SQL parsing is involved (quoted strings will also change).\" },\n    \"prepareStatementStrategy\": { \"kind\": \"parameter\", \"displayName\": \"Prepare Statement Strategy\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"org.apache.camel.component.sql.SqlPrepareStatementStrategy\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" },\n    \"templateOptions\": { \"kind\": \"parameter\", \"displayName\": \"Template Options\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"template.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"Configures the Spring JdbcTemplate with the key/values from the Map\" },\n    \"usePlaceholder\": { \"kind\": \"parameter\", \"displayName\": \"Use Placeholder\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries. This option is default true\" },\n    \"backoffErrorThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Error Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffIdleThreshold\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Idle Threshold\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.\" },\n    \"backoffMultiplier\": { \"kind\": \"parameter\", \"displayName\": \"Backoff Multiplier\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"int\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.\" },\n    \"delay\": { \"kind\": \"parameter\", \"displayName\": \"Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 500, \"description\": \"Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"greedy\": { \"kind\": \"parameter\", \"displayName\": \"Greedy\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.\" },\n    \"initialDelay\": { \"kind\": \"parameter\", \"displayName\": \"Initial Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"integer\", \"javaType\": \"long\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": 1000, \"description\": \"Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\" },\n    \"runLoggingLevel\": { \"kind\": \"parameter\", \"displayName\": \"Run Logging Level\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.LoggingLevel\", \"enum\": [ \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"TRACE\", \"description\": \"The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.\" },\n    \"scheduledExecutorService\": { \"kind\": \"parameter\", \"displayName\": \"Scheduled Executor Service\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.ScheduledExecutorService\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"description\": \"Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.\" },\n    \"scheduler\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"org.apache.camel.spi.ScheduledPollConsumerScheduler\", \"enum\": [ \"none\", \"spring\", \"quartz2\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"none\", \"description\": \"To use a cron scheduler from either camel-spring or camel-quartz2 component\" },\n    \"schedulerProperties\": { \"kind\": \"parameter\", \"displayName\": \"Scheduler Properties\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.Map<java.lang.String,java.lang.Object>\", \"prefix\": \"scheduler.\", \"multiValue\": true, \"deprecated\": false, \"secret\": false, \"description\": \"To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.\" },\n    \"startScheduler\": { \"kind\": \"parameter\", \"displayName\": \"Start Scheduler\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the scheduler should be auto started.\" },\n    \"timeUnit\": { \"kind\": \"parameter\", \"displayName\": \"Time Unit\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"object\", \"javaType\": \"java.util.concurrent.TimeUnit\", \"enum\": [ \"NANOSECONDS\", \"MICROSECONDS\", \"MILLISECONDS\", \"SECONDS\", \"MINUTES\", \"HOURS\", \"DAYS\" ], \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"MILLISECONDS\", \"description\": \"Time unit for initialDelay and delay options.\" },\n    \"useFixedDelay\": { \"kind\": \"parameter\", \"displayName\": \"Use Fixed Delay\", \"group\": \"scheduler\", \"label\": \"consumer,scheduler\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"optionalPrefix\": \"consumer.\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.\" }\n  }\n}\n\n",
      "sql-stored" : "{\n \"component\": {\n    \"kind\": \"component\",\n    \"scheme\": \"sql-stored\",\n    \"syntax\": \"sql-stored:template\",\n    \"title\": \"SQL Stored Procedure\",\n    \"description\": \"The sql component allows you to work with databases using JDBC Stored Procedure queries.\",\n    \"label\": \"database,sql\",\n    \"deprecated\": false,\n    \"deprecationNote\": \"\",\n    \"async\": false,\n    \"consumerOnly\": false,\n    \"producerOnly\": true,\n    \"lenientProperties\": false,\n    \"javaType\": \"org.apache.camel.component.sql.stored.SqlStoredComponent\",\n    \"firstVersion\": \"2.17.0\",\n    \"groupId\": \"org.apache.camel\",\n    \"artifactId\": \"camel-sql\",\n    \"version\": \"2.20.0\"\n  },\n  \"componentProperties\": {\n    \"dataSource\": { \"kind\": \"property\", \"displayName\": \"Data Source\", \"group\": \"producer\", \"type\": \"object\", \"javaType\": \"javax.sql.DataSource\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the DataSource to use to communicate with the database.\" },\n    \"resolvePropertyPlaceholders\": { \"kind\": \"property\", \"displayName\": \"Resolve Property Placeholders\", \"group\": \"advanced\", \"label\": \"advanced\", \"required\": false, \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": true, \"description\": \"Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders.\" }\n  },\n  \"properties\": {\n    \"template\": { \"kind\": \"path\", \"displayName\": \"Template\", \"group\": \"producer\", \"required\": true, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the StoredProcedure template to perform\" },\n    \"batch\": { \"kind\": \"parameter\", \"displayName\": \"Batch\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Enables or disables batch mode\" },\n    \"dataSource\": { \"kind\": \"parameter\", \"displayName\": \"Data Source\", \"group\": \"producer\", \"type\": \"object\", \"javaType\": \"javax.sql.DataSource\", \"deprecated\": false, \"secret\": false, \"description\": \"Sets the DataSource to use to communicate with the database.\" },\n    \"function\": { \"kind\": \"parameter\", \"displayName\": \"Function\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether this call is for a function.\" },\n    \"noop\": { \"kind\": \"parameter\", \"displayName\": \"Noop\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"If set will ignore the results of the template and use the existing IN message as the OUT message for the continuation of processing\" },\n    \"outputHeader\": { \"kind\": \"parameter\", \"displayName\": \"Output Header\", \"group\": \"producer\", \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"description\": \"Store the template result in a header instead of the message body. By default outputHeader == null and the template result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the template result and the original message body is preserved.\" },\n    \"useMessageBodyForTemplate\": { \"kind\": \"parameter\", \"displayName\": \"Use Message Body For Template\", \"group\": \"producer\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Whether to use the message body as the template and then headers for parameters. If this option is enabled then the template in the uri is not used.\" },\n    \"synchronous\": { \"kind\": \"parameter\", \"displayName\": \"Synchronous\", \"group\": \"advanced\", \"label\": \"advanced\", \"type\": \"boolean\", \"javaType\": \"boolean\", \"deprecated\": false, \"secret\": false, \"defaultValue\": false, \"description\": \"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).\" }\n  }\n}\n\n"
    }
  },
  "gav" : "org.apache.camel:camel-sql:2.20.0"
} ]